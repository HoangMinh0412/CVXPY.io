"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.countWhere = exports.ManyMap = exports.length = exports.entries = exports.linq = exports.values = exports.keys = exports.when = void 0;
/** performs a truthy check on the value, and calls onTrue when the condition is true,and onFalse when it's not */
function when(value, onTrue, onFalse = () => { }) {
    return value ? onTrue(value) : onFalse();
}
exports.when = when;
/* eslint-disable */
function linqify(iterable) {
    if (iterable['linq'] === iterable) {
        return iterable;
    }
    const r = {
        [Symbol.iterator]: iterable[Symbol.iterator].bind(iterable),
        all: all.bind(iterable),
        any: any.bind(iterable),
        bifurcate: bifurcate.bind(iterable),
        concat: concat.bind(iterable),
        distinct: distinct.bind(iterable),
        duplicates: duplicates.bind(iterable),
        first: first.bind(iterable),
        select: select.bind(iterable),
        selectMany: selectMany.bind(iterable),
        selectNonNullable: selectNonNullable.bind(iterable),
        toArray: toArray.bind(iterable),
        toObject: toObject.bind(iterable),
        where: where.bind(iterable),
        forEach: forEach.bind(iterable),
        aggregate: aggregate.bind(iterable),
        join: join.bind(iterable),
        count: len.bind(iterable),
        results: results.bind(iterable),
        toMap: toMap.bind(iterable),
        groupBy: groupBy.bind(iterable),
        selectAsync: selectAsync.bind(iterable),
    };
    r.linq = r;
    return r;
}
function len() {
    return length(this);
}
function keys(source) {
    if (source) {
        if (Array.isArray(source)) {
            return source.keys();
        }
        if (source instanceof Map) {
            return source.keys();
        }
        if (source instanceof Set) {
            throw new Error('Unable to iterate keys on a Set');
        }
        return Object.keys(source);
    }
    // undefined/null
    return [];
}
exports.keys = keys;
function _keys(source) {
    if (source) {
        if (Array.isArray(source)) {
            return linqify(source.keys());
        }
        if (source instanceof Map) {
            return linqify(source.keys());
        }
        if (source instanceof Set) {
            throw new Error('Unable to iterate keys on a Set');
        }
        return linqify((Object.keys(source)));
    }
    // undefined/null
    return linqify([]);
}
function isIterable(source) {
    return !!source && !!source[Symbol.iterator];
}
function values(source) {
    if (source) {
        // map
        if (source instanceof Map || source instanceof Set) {
            return source.values();
        }
        // any iterable source
        if (isIterable(source)) {
            return source;
        }
        // dictionary (object keys)
        return Object.values(source);
    }
    // null/undefined
    return [];
}
exports.values = values;
exports.linq = {
    values: _values,
    entries: _entries,
    keys: _keys,
    find: _find,
    startsWith: _startsWith,
    join: _join
};
/** returns an IterableWithLinq<> for values in the collection
 *
 * @note - null/undefined/empty values are considered 'empty'
*/
function _values(source) {
    return (source) ? linqify(values(source)) : linqify([]);
}
function entries(source) {
    if (source) {
        if (Array.isArray(source)) {
            return source.entries();
        }
        if (source instanceof Map) {
            return source.entries();
        }
        if (source instanceof Set) {
            throw new Error('Unable to iterate items on a Set (use values)');
        }
        return Object.entries(source);
    }
    // undefined/null
    return [];
}
exports.entries = entries;
/** returns an IterableWithLinq<{key,value}> for the source */
function _entries(source) {
    return linqify(source ? entries(source) : []);
}
/** returns the first value where the key equals the match value (case-insensitive) */
function _find(source, match) {
    return _entries(source).first(([key,]) => key.toString().localeCompare(match, undefined, { sensitivity: 'base' }) === 0)?.[1];
}
/** returns the first value where the key starts with the match value (case-insensitive) */
function _startsWith(source, match) {
    match = match.toLowerCase();
    return _entries(source).first(([key,]) => key.toString().toLowerCase().startsWith(match))?.[1];
}
function _join(source, delimiter) {
    return source ? _values(source).join(delimiter) : '';
}
function length(source) {
    if (source) {
        if (Array.isArray(source) || typeof (source) === 'string') {
            return source.length;
        }
        if (source instanceof Map || source instanceof Set) {
            return source.size;
        }
        if (isIterable(source)) {
            return [...source].length;
        }
        return source ? Object.values(source).length : 0;
    }
    return 0;
}
exports.length = length;
function toMap(keySelector, selector) {
    const result = new Map();
    for (const each of this) {
        result.set(keySelector(each), selector(each));
    }
    return result;
}
function groupBy(keySelector, selector) {
    const result = new ManyMap();
    for (const each of this) {
        result.push(keySelector(each), selector(each));
    }
    return result;
}
function any(predicate) {
    for (const each of this) {
        if (!predicate || predicate(each)) {
            return true;
        }
    }
    return false;
}
function all(predicate) {
    for (const each of this) {
        if (!predicate(each)) {
            return false;
        }
    }
    return true;
}
function concat(more) {
    return linqify(function* () {
        for (const each of this) {
            yield each;
        }
        for (const each of more) {
            yield each;
        }
    }.bind(this)());
}
function select(selector) {
    return linqify(function* () {
        for (const each of this) {
            yield selector(each);
        }
    }.bind(this)());
}
async function* selectAsync(selector) {
    for (const each of this) {
        yield selector(each);
    }
}
function selectMany(selector) {
    return linqify(function* () {
        for (const each of this) {
            yield* selector(each);
        }
    }.bind(this)());
}
function where(predicate) {
    return linqify(function* () {
        for (const each of this) {
            if (predicate(each)) {
                yield each;
            }
        }
    }.bind(this)());
}
function forEach(action) {
    for (const each of this) {
        action(each);
    }
}
function aggregate(accumulator, seed, resultAction) {
    let result = seed;
    for (const each of this) {
        if (result === undefined) {
            result = each;
            continue;
        }
        result = accumulator(result, each);
    }
    return resultAction !== undefined ? resultAction(result) : result;
}
function selectNonNullable(selector) {
    return linqify(function* () {
        for (const each of this) {
            const value = selector(each);
            if (value) {
                yield value;
            }
        }
    }.bind(this)());
}
function nonNullable() {
    return linqify(function* () {
        for (const each of this) {
            if (each) {
                yield each;
            }
        }
    }.bind(this)());
}
function first(predicate) {
    for (const each of this) {
        if (!predicate || predicate(each)) {
            return each;
        }
    }
    return undefined;
}
function toArray() {
    return [...this];
}
function toObject(selector) {
    const result = {};
    for (const each of this) {
        const [key, value] = selector(each);
        result[key] = value;
    }
    return result;
}
async function results() {
    await Promise.all([...this]);
}
function join(separator) {
    return [...this].join(separator);
}
function bifurcate(predicate) {
    const result = [new Array(), new Array()];
    for (const each of this) {
        result[predicate(each) ? 0 : 1].push(each);
    }
    return result;
}
function distinct(selector) {
    const hash = {};
    return linqify(function* () {
        if (!selector) {
            selector = i => i;
        }
        for (const each of this) {
            const k = JSON.stringify(selector(each));
            if (!hash[k]) {
                hash[k] = true;
                yield each;
            }
        }
    }.bind(this)());
}
function duplicates(selector) {
    const hash = {};
    return linqify(function* () {
        if (!selector) {
            selector = i => i;
        }
        for (const each of this) {
            const k = JSON.stringify(selector(each));
            if (hash[k] === undefined) {
                hash[k] = false;
            }
            else {
                if (hash[k] === false) {
                    hash[k] = true;
                    yield each;
                }
            }
        }
    }.bind(this)());
}
/** A Map of Key: Array<Value>  */
class ManyMap extends Map {
    /**
     * Push the value into the array at key
     * @param key the unique key in the map
     * @param value the value to push to the collection at 'key'
     */
    push(key, value) {
        this.getOrDefault(key, []).push(value);
    }
}
exports.ManyMap = ManyMap;
function countWhere(from, predicate) {
    let v = 0;
    const all = [];
    for (const each of from) {
        const test = predicate(each);
        if (test.then) {
            all.push(test.then((antecedent) => {
                if (antecedent) {
                    v++;
                }
            }));
            continue;
        }
        if (test) {
            v++;
        }
    }
    if (all.length) {
        return Promise.all(all).then(() => v);
    }
    return v;
}
exports.countWhere = countWhere;
//# sourceMappingURL=data:application/json;base64,
// SIG // Begin signature block
// SIG // MIIoKwYJKoZIhvcNAQcCoIIoHDCCKBgCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 6VKYM1g9xZ5eorQqeV6YAC8/d0Y2Nld5ZdvGpefKdX2g
// SIG // gg12MIIF9DCCA9ygAwIBAgITMwAABARsdAb/VysncgAA
// SIG // AAAEBDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTI0MDkxMjIwMTExNFoX
// SIG // DTI1MDkxMTIwMTExNFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3
// SIG // w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8
// SIG // EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJ
// SIG // jjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/T
// SIG // WO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO
// SIG // /WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9co
// SIG // T2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O
// SIG // 0cEIvKdX8uG8oQa047+evMfDRr94MG9EWwIDAQABo4IB
// SIG // czCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFPIboTWxEw1PmVpZS+AzTDwo
// SIG // oxFOMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAx
// SIG // Mis1MDI5MjMwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3
// SIG // IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggr
// SIG // BgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNV
// SIG // HRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCI5g/S
// SIG // KUFb3wdUHob6Qhnu0Hk0JCkO4925gzI8EqhS+K4umnvS
// SIG // BU3acsJ+bJprUiMimA59/5x7WhJ9F9TQYy+aD9AYwMtb
// SIG // KsQ/rst+QflfML+Rq8YTAyT/JdkIy7R/1IJUkyIS6srf
// SIG // G1AKlX8n6YeAjjEb8MI07wobQp1F1wArgl2B1mpTqHND
// SIG // lNqBjfpjySCScWjUHNbIwbDGxiFr93JoEh5AhJqzL+8m
// SIG // onaXj7elfsjzIpPnl8NyH2eXjTojYC9a2c4EiX0571Ko
// SIG // mhENF3RtR25A7/X7+gk6upuE8tyMy4sBkl2MUSF08U+E
// SIG // 2LOVcR8trhYxV1lUi9CdgEU2CxODspdcFwxdT1+G8YNc
// SIG // gzHyjx3BNSI4nOZcdSnStUpGhCXbaOIXfvtOSfQX/UwJ
// SIG // oruhCugvTnub0Wna6CQiturglCOMyIy/6hu5rMFvqk9A
// SIG // ltIJ0fSR5FwljW6PHHDJNbCWrZkaEgIn24M2mG1M/Ppb
// SIG // /iF8uRhbgJi5zWxo2nAdyDBqWvpWxYIoee/3yIWpquVY
// SIG // cYGhJp/1I1sq/nD4gBVrk1SKX7Do2xAMMO+cFETTNSJq
// SIG // fTSSsntTtuBLKRB5mw5qglHKuzapDiiBuD1Zt4QwxA/1
// SIG // kKcyQ5L7uBayG78kxlVNNbyrIOFH3HYmdH0Pv1dIX/Mq
// SIG // 7avQpAfIiLpOWwcbjzCCB3owggVioAMCAQICCmEOkNIA
// SIG // AAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4XDTEx
// SIG // MDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZI
// SIG // hvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6q
// SIG // ghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7dN2vG
// SIG // EtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
// SIG // XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv
// SIG // 56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64DhkrG5k
// SIG // NXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ97/vj
// SIG // K1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd
// SIG // 6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4ftKd
// SIG // gCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf8NBS
// SIG // v4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbs
// SIG // YR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43Bd
// SIG // D1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8GLhE
// SIG // fEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xb
// SIG // n6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7Iv
// SIG // hNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXUpUMv
// SIG // dJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY
// SIG // 0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEE
// SIG // AwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVtqMp1
// SIG // ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYDVR0f
// SIG // BFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcBAQRS
// SIG // MFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAx
// SIG // MV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGUMIGR
// SIG // BgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9w
// SIG // cmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // Z/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVf
// SIG // Liw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZddZYSQ
// SIG // fYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
// SIG // tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELuk
// SIG // qQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP80Yr
// SIG // 3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ1h/D
// SIG // Mhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycSca
// SIG // f7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6CPxNN
// SIG // ZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2l4bf
// SIG // 2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+
// SIG // YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOX
// SIG // pQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpIlR+r
// SIG // +0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6
// SIG // /IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4
// SIG // ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3ZbCoBI
// SIG // a/15n8G9bW1qyVJzEw16UM0xghoNMIIaCQIBATCBlTB+
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
// SIG // b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAE
// SIG // BGx0Bv9XKydyAAAAAAQEMA0GCWCGSAFlAwQCAQUAoIGu
// SIG // MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisG
// SIG // AQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3
// SIG // DQEJBDEiBCD4eAIN17BDmzXy+sWgiuIbVMiaFcuT3g4A
// SIG // Xm99Xuxw1DBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBp
// SIG // AGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAHDreQyQ
// SIG // 6ss4murL+cWUZm6wtkJpdKYW0JUHKwUQYDhY+MndNTZk
// SIG // Oj+15nBpL5wUnQTB5gu6x7lYjPxuIKru9khd8wS2dw51
// SIG // lTKHcCPjJT0tDINphEpM+Gxl7H5Su110W/RAeMa6jm7z
// SIG // D7DxVb+x7Ov0XcUIVcQ/Jqe2WlxShw++3d7bU8YZISZ/
// SIG // p26xaXBaGe7Wzsn5Vgwk7mSd9PAtpbYLxlnwmhcP5ySC
// SIG // JpD1ZdVnGA04EpSdrrYm4hs7TiQLZkj7BQhtbtsclD5c
// SIG // Q+36nYZFB4jjcd+OVHwofYuvLaMMmMvPwWZicRE2MHku
// SIG // E501I/QhDzQ+BF4ZNjVfemseAaehgheXMIIXkwYKKwYB
// SIG // BAGCNwMDATGCF4Mwghd/BgkqhkiG9w0BBwKgghdwMIIX
// SIG // bAIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUgYLKoZIhvcN
// SIG // AQkQAQSgggFBBIIBPTCCATkCAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQgrgsRgPwAAFp3OA1dTiwh
// SIG // s3mGelam03syKPeOJF7uTosCBmdSJ9wObRgTMjAyNDEy
// SIG // MDkyMTAzMzIuMjAyWjAEgAIB9KCB0aSBzjCByzELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0
// SIG // IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUGA1UECxMeblNo
// SIG // aWVsZCBUU1MgRVNOOkYwMDItMDVFMC1EOTQ3MSUwIwYD
// SIG // VQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNl
// SIG // oIIR7TCCByAwggUIoAMCAQICEzMAAAHyPjLXZKxwkZQA
// SIG // AQAAAfIwDQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTAwHhcNMjMxMjA2MTg0NTU4WhcN
// SIG // MjUwMzA1MTg0NTU4WjCByzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3Bl
// SIG // cmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNO
// SIG // OkYwMDItMDVFMC1EOTQ3MSUwIwYDVQQDExxNaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAvOXzyxcKaWIMcGMZ
// SIG // EhHmL0AbZ2CU7Sio9hSscx8dH4Fel4CCK5glpqSpfSDs
// SIG // 7znyf5Ooj9EZ6EaORfPQHdvXncxnZVmwo9UMseR1BzWP
// SIG // MrvRJSTpnYHrjb0yuEVuMLvYgef89kngrmKsl/7/M+j6
// SIG // b9vYdbbTVrEnPyjznroc0gF6pANuuQUhU+ZMpMb8wdC8
// SIG // aMUuqFqF1iusMde9jUSUWHCDX1w4VEb1Hw+9I4qBPdq1
// SIG // vzoI3DisWZH0MS5cGhUq0pxrO14TK6fU7FIJsLMnExDg
// SIG // XRlZn9Rwg+1jms+RBHEMiEtgaUWGMLDzGwet7h4idefK
// SIG // jYdUiV7qC+cBg7v22VMzfgc3C4/eosQu8CRkDAYsVh/X
// SIG // fvlfG5ddEWHVw2ZZY0QL0uohcDc62obuA62G+2/DO778
// SIG // IRC9MQjr2+1hTLLLbHF35HROYPjUmnKYYBX3KH7UOajw
// SIG // 9jzVZqxt/A5hw6GIYI/bqjyz+756F3+4+vi1vFaJ9efA
// SIG // 9Fq5pOwrprnEE4h0cnqRGlQ55wNhpIiaHof6930oS+gh
// SIG // 4D6Ewe6GFP3eiTp3EYqA2KqkX1dsJaSlTvG/lWBy/IZ9
// SIG // dSURceqevZi/AUbUmenRvxhRFRPn1ZoMWHyAlK6YIckJ
// SIG // REyTyExAUteSLGlLltBr15S0qHxn9reQwKA5Ligmwvt1
// SIG // XT5pWFUCAwEAAaOCAUkwggFFMB0GA1UdDgQWBBSVW4cA
// SIG // JurQMQTOXB/AYNPmOuKGeTAfBgNVHSMEGDAWgBSfpxVd
// SIG // AF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQ
// SIG // hk5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3Bz
// SIG // L2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENB
// SIG // JTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwG
// SIG // CCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
// SIG // b20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRpbWUt
// SIG // U3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNVHRMB
// SIG // Af8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMA4G
// SIG // A1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // PUunjuB7HwdNF6ToD2m3Dd0GXsoqYIpXEEg2fIOlQr/R
// SIG // VR83UqvV6QLJY2UijVkgpYSRM+TqN1Jv7Wj56GxfvApA
// SIG // HZHC0IS3ZEoX6/dZM8vbwz6zppQgNhUPY1YRWmrdkDN9
// SIG // 89afhgj+bbr4qxWlFs1FlQxTqaPzucw6c6D2LU69HBYN
// SIG // 7l2kS0+eFEN2OLj2F6p+sLp2bVEETIiTM8aVJb3X1hlL
// SIG // Qr51t3gwYpA5IsdVxPfFXGCM9vuX3XL6x1XlGqxl8uC0
// SIG // bcM5sKbArVIe7UesIQq1WJG+hbnQXVjO01b44u6RoH43
// SIG // rIJwEmg/woS7seujxsGiGhfsS85NGzcbAI9LoXekHVq+
// SIG // k09/Zv0jWdf1F1O5MxKHdLwGN5iJ/F+QOCPvf3tZwTaV
// SIG // ESemIgykHeWFYMbLmQlr+EMG9Jl4RyHvQrm30qmY7w2s
// SIG // H9iNtvTdy7LQyVEq9bxhQfIkOVvGSzOT8E/L7bChAcBx
// SIG // GJsLLlprMZIpiBeQUG0s4PcM9Tuo3Vk8RhtDlLdXF1jj
// SIG // CVCc8hB+FkimRzsed6nALw/YdFOoxBdn7gY7Sf0A61m2
// SIG // +Lq7wH676jZ/ZR+4FT6ZajTwyL0PA5Gd5b20LGKpc+te
// SIG // 3u+oGu0mNMO9fkD9euQj3c1GN+nrdkpuKb7KRCvIZZat
// SIG // yGHMl9L/Pe/l/WHnnDNT29YwggdxMIIFWaADAgECAhMz
// SIG // AAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUA
// SIG // MIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylN
// SIG // aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
// SIG // dHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAx
// SIG // ODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // 5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1
// SIG // V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeF
// SIG // RiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDc
// SIG // wUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus
// SIG // 9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoPz130
// SIG // /o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHI
// SIG // NSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTes
// SIG // y+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGp
// SIG // F1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+
// SIG // /NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fz
// SIG // pk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNO
// SIG // wTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLi
// SIG // Mxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5
// SIG // UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9Q
// SIG // BXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6H
// SIG // XtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIG
// SIG // CSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYE
// SIG // FCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSf
// SIG // pxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEG
// SIG // DCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3Mv
// SIG // UmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUH
// SIG // AwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0f
// SIG // BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBK
// SIG // BggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0w
// SIG // Ni0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1Vffwq
// SIG // reEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1
// SIG // OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpT
// SIG // Td2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pvvinL
// SIG // btg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l
// SIG // 9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJ
// SIG // w7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2Fz
// SIG // Lixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7
// SIG // hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY
// SIG // 3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFX
// SIG // SVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFU
// SIG // a2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz
// SIG // /gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/
// SIG // AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1
// SIG // ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328
// SIG // y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEG
// SIG // ahC0HVUzWLOhcGbyoYIDUDCCAjgCAQEwgfmhgdGkgc4w
// SIG // gcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1p
// SIG // Y3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJzAlBgNV
// SIG // BAsTHm5TaGllbGQgVFNTIEVTTjpGMDAyLTA1RTAtRDk0
// SIG // NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZaIjCgEBMAcGBSsOAwIaAxUAa4veN3BSx9k3
// SIG // 0BHwdOUiyAoO+AiggYMwgYCkfjB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQsFAAIFAOsB
// SIG // Q2kwIhgPMjAyNDEyMDkxMDIyMzNaGA8yMDI0MTIxMDEw
// SIG // MjIzM1owdzA9BgorBgEEAYRZCgQBMS8wLTAKAgUA6wFD
// SIG // aQIBADAKAgEAAgIb5wIB/zAHAgEAAgITcDAKAgUA6wKU
// SIG // 6QIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZ
// SIG // CgMCoAowCAIBAAIDB6EgoQowCAIBAAIDAYagMA0GCSqG
// SIG // SIb3DQEBCwUAA4IBAQB1xgkX78dOSWLF54XVGrBAzE44
// SIG // 9hzqs0TFQ3Lf/QeY7jCwkVM1J4AhxyO0x7hqaOFHkXfz
// SIG // AEccwPIKhYJ1xE7/J+QXj/CnjQYEDZDMnT5otappHcCb
// SIG // RR5MPNshYP1DZtxNOOKAfEpspCQ7HPR3OShiH715wLrR
// SIG // hraBBrFpOWNAnGPkF+8nzxyggs5Zeeofw7+ieNaoXarU
// SIG // AYJADBVkj5ol4sTsn7QbJlOvBR6YxIYqczZ2XeOx7K+B
// SIG // THkHtPoNj53jTe71X63Rc64zjQNj4+sHbMzFcydcJPWI
// SIG // B/BoZIzj11z2juKK2LgabKpZ9Xj7zU6Fw3mr6hNIJWhg
// SIG // mcL3JCtzMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTACEzMAAAHyPjLXZKxwkZQAAQAA
// SIG // AfIwDQYJYIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJ
// SIG // AzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQg
// SIG // 2PPsq5utY+o31k+xp9ko8FkB/OeyKGETTXY1Bbn64s4w
// SIG // gfoGCyqGSIb3DQEJEAIvMYHqMIHnMIHkMIG9BCD42j4d
// SIG // LjFSXNOPmOEbuQVFGxxOLLmep0R0lLtF10pDRDCBmDCB
// SIG // gKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAAB8j4y12SscJGUAAEAAAHyMCIEIIRgj9ogKiylvCGz
// SIG // ASPmuKTVCmNh/KEWFfOCsleXbREvMA0GCSqGSIb3DQEB
// SIG // CwUABIICAIs4R96tNNVCG+AvEYshrtkcc75PGDprYKB4
// SIG // sfTdSBnZTbhy39AehDjurNV9YPAldVAy00HGswGWGfeZ
// SIG // H9tIepajHbLTOgwUDhxM7wMDUG6QfHNVDetGcAxLif7d
// SIG // zG05zeGtKpCg1a5OTsp9VM3AEapdc1j89TYVoyFOZGqB
// SIG // aLEDBvI2TLOyaLu0qzPbnbhB77nC9BRtKC2AiBE2RtHM
// SIG // oQRI9uX4yRaocWh3C9fmbDIyOJdFVS7UlPoT7SOOYGDg
// SIG // IcUdgrkq70s2bCa2hhVnsVCqvZCXRmxS8hZ/3hfZPZVH
// SIG // JMXhNlACkS6Y9x20KA97GNUI0wvFait+DUGvxXW2QfrN
// SIG // d/MEzogtHOiI22BH5tTyQU9vqAVt7m0lRIjMJJ9FSi6L
// SIG // cpOYEVWWViBO3Up3IFxnwNu0bjen37onMxhLbbpNj40z
// SIG // 3QDS8Rj/y80Q/E4qnYNETr1OK5vRxHDpYbOPVt8BRSIf
// SIG // plCPOZYzNRorCSBZ0GWLm07SgjQJm8K7qb8itE7mPbLu
// SIG // U2jnZDpWQKzlxJjprZBhgxRhiwtzTJZDshGFoF9i77Cz
// SIG // djQZ16D6hzAEkTTZ4Uz3aBGHHMaJZASs3KeRn8QyQDPp
// SIG // F+/UdxvsDwtIyWEAXUN4lIsADCxEsc+XWKu5w6YNI0Qq
// SIG // IuQTD5Kdc6byS2/wV43TUrYWIDYwuUFc
// SIG // End signature block
