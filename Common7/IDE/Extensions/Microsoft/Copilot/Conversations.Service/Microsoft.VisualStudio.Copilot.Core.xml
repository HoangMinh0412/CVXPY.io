<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Copilot.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.DifferentiatingLatch`2">
            <summary>
            Helper for tracking whether an object has been seen before, based on a differentiator function.
            </summary>
            <typeparam name="T">The type of object to observe.</typeparam>
            <typeparam name="TDifferentiator">A type derivable from the object which can be compared to determine whether the object has been seen before or not.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ExceptionDifferentiatingLatch">
            <summary>
            Differentiates exceptions by their type and stack trace, so that logging the same exception repeatedly can be avoided.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.EqualityDifferentiatingLatch`1">
            <summary>
            A trivial differentiating latch that just uses the item itself as the differentiator.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ILazyMapCache`2">
            <summary>
            A cache that can be read from, but does not allow explicitly setting items. Items are constructed if they are missing when read.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ILazyMapCache`2.Get(`0)">
            <summary>
            Retrieves the value associated with the specified <paramref name="key" /> object.
            If it is not already in the cache, the factory is called.
            </summary>
            <param name="key">The object to be used as a key.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ILazyMapCache`2.Count">
            <summary>
            The number of entries currently present in the cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ILazyMapCache`2.Clear">
            <summary>
            Clears the contents of this cache.
            May throw if any of the event handlers throw, but the cache will be cleared regardless.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ILazyMapCache`2.ItemEvicted">
            <summary>
            Event raised for each item that's evicted from the cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2">
            <summary>
            A cache that can have items manually added or replaced, as well as read.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2.Replace(`0,`1)">
            <summary>
            Replaces the value associated with the specified <paramref name="key" /> with the specified <paramref name="value" />.
            </summary>
            <param name="key">Key of the entry to be replaced.</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2.Remove(`0)">
            <summary>
               Removes the mapping for the specified <paramref name="key" /> from the cache, if it is present.
            </summary>
            <param name="key">Key of the entry to be removed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2.Get(`0,`1@)">
            <summary>
            Retrieves the value associated with the specified <paramref name="key" /> object.
            </summary>
            <param name="key">The object to be used as a key.</param>
            <param name="value"> An <code>out</code> parameter that is set to the value of the key if <paramref name="key" /> contains a mapping in the cache.</param>
            <returns>
            <code>true</code> if the cache contains a mapping for <paramref name="key" />, <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2.Clear">
            <summary>
            Clears the contents of this cache.
            May throw if any of the event handlers throw, but the cache will be cleared regardless.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2.Count">
            <summary>
            The number of entries currently present in the cache.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache`2.ItemEvicted">
            <summary>
            Event raised for each item that's evicted from the cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.ItemFactoryLruCache`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LockingDictionary`2">
            <summary>
            A lower-overhead, simpler take on <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> which protects its operations with a lock.
            </summary>
            <remarks>
            <see cref="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LockingDictionary`2.GetEnumerator" /> is not supported.
            The pull request introducing this has a
            <a href="https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VisualStudio.Conversations/pullRequest/592101#1732221048">brief discussion about this class.</a>
            It could be removed in the future.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.DefaultCacheSize">
            <summary>
            The default LRU cache size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.#ctor(System.Int32)">
            <summary>
                Constructs an <see cref="T:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2" /> object.
            </summary>
            <param name="cacheSize">
                The maximum number of <typeparamref name="TKey" /> to <typeparamref name="TValue" /> mappings
                that can be cached. This defaults to <see cref="F:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.DefaultCacheSize" />, which is set to
                <value>4096</value>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.Get(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.Replace(`0,`1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.Count">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.GenericUtilities.LruCache`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Git.GitExeInvocation.BaseGitCommand`1.AddArguments(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Add arguments to the call to git.exe.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Git.GitExeInvocation.BaseGitCommand`1.ProcessOutputAsync(System.String)">
            <summary>
            Process the output of git.exe and return a result.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Git.GitExeInvocation.BaseGitCommand`1.WriteToStandardInputAsync(System.Threading.CancellationToken)">
            <summary>
            Override to write to standard input. Called between starting the process and waiting for exit, but only if <see cref="P:Microsoft.VisualStudio.Copilot.Core.Git.GitExeInvocation.BaseGitCommand`1.RedirectStandardInput" /> is true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Git.GitExeInvocation.BaseGitCommand`1.HandleErrorAsync(System.String,System.Int32)">
            <summary>
            Handle any errors from invoking the git command, this should throw an exception if there is an issue. Default behavior is to throw if the exit code is != 0.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat">
            <summary>
            Describes the kind of data to be formatted.
            </summary>
            <remarks>
            Values corresponding to letters may also be used as format specifiers
            when using a <see cref="T:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatter" /> instance as the format provider.
            Other flags are only for use with <see cref="T:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatAttribute" /> when
            applied to properties.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Default">
            <summary>
            Data is formatted (with no privacy) using the type's standard or overridden
            `ToString()` method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Text">
            <summary>
            Text is hashed when privacy is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Path">
            <summary>
            File name or file path is partially hashed when privacy is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Email">
            <summary>
            Email address is partially hashed when privacy is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Uri">
            <summary>
            URI is partially hashed when privacy is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Token">
            <summary>
            Tokens are never formatted, regardless of whether privacy is enabled.
            Instead they are replaced by a placeholder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Omit">
            <summary>
            Indicates a property should always be omitted from a formatted object,
            regardless of whether privacy is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.OmitDefault">
            <summary>
            Indicates a property should be omitted from a formatted object if the value
            is null or the default value for the type, rather than included as "Name=null".
            Can be combined with other format flags.
            </summary>
            <remarks>
            This may be inferred from [DataMember(EmitDefaultValue=false)].
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.Hide">
            <summary>
            Indicates a property should be omitted from a formatted object when
            privacy is enabled. Can be combined with other format flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormat.SingleMember">
            <summary>
            An object that normally has a single non-null member value is formatted
            in a more-compact form.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatAttribute">
            <summary>
            Indicates that a class or property should be formatted in a specific way
            by a <see cref="T:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatter" /> format provider instance.
            </summary>
            <remarks>
            Use when `DataContract` and `DataMember` attributes are not used or
            do not provide sufficient formatting hints.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatAttribute.Format">
            <summary>
            Gets or sets the kind of data represented by the property, for purposes
            of data formatting and hashing.
            </summary>
            <remarks>
            Not valid for use on a class attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatter">
             <summary>
             Supports formatting various fields for logging purposes, including optional
             hashing of potentially sensitive information to protect privacy.
             </summary>
             <remarks>
             This class implements `IFormatProvider`, so an instance can be passed as the
             first parameter to `String.Format()`. For example this line:
                 String.Format(new DataFormatter(), "{0:P}", filePath);
             will use the `DataFormatter` to hash the file path when formatting it.
            
             Use an instance of this class as the format provider for a class that extends
             `TraceListenerBase` to enable smart formatting of traced data objects.
             </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatter.Debug">
            <summary>
            Format string suitable for use with DebuggerDisplayAttribute, for example:
                [DebuggerDisplay(DataFormatter.Debug)].
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Logging.DataFormatter.Format(System.Object)">
            <summary>
            Formats an object using the object's default format.
            </summary>
            <remarks>
            This static method does NOT use hashing, regardless of any instance setting.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Logging.Privacy">
            <summary>
            Manages a key used to hash sensitive data to ensure privacy.
            </summary>
            <remarks>
            Once generated (or set by a client), the key is stored in .NET isolated storage,
            so that it remains consistent across sessions. The key does not need to be
            stored in a secure vault because it is only used as an HMAC key for hashing
            the current user's data for tracing and telemetry; the hashed data is then
            uploaded without the key.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Logging.Privacy.Key">
            <summary>
            Gets the key, generating it if not found in storage,
            or sets the key and stores it for later use.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.AbsolutePath">
            <summary>
            Type containing absolute, separator-normalized paths. Casing is not normalized.
            This type implements case-sensitive value equality. For case insensitive comparison, use <see cref="T:Microsoft.VisualStudio.Copilot.Core.CaseInsensitiveAbsolutePathComparer" />.
            To construct this from a path that isn't normalized, use <see cref="M:Microsoft.VisualStudio.Copilot.Core.AbsolutePath.Normalized(System.String)" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.AbstractRepoFileSystem">
            <summary>
            Abstraction of the filesystem used for repository discovery in content exclusion. Loosely aligns to the filesystem and uri apis available in the nodejs implementation of copilot-client.
            Used by implementation that was ported from there, such as <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRepositoryExclusionRuleDomain" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.CaseInsensitiveAbsolutePathComparer">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Copilot.Core.AbsolutePath" /> case insensitively.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.CaseSensitiveAbsolutePathComparer">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Copilot.Core.AbsolutePath" /> case sensitively.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.LocalFileSystem">
            <summary>
            Implementation of <see cref="T:Microsoft.VisualStudio.Copilot.Core.AbstractRepoFileSystem" /> that simply uses the local filesystem.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.PathUriDecoding">
            <summary>
            URI decoding with behavior matching node.js.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PathUriDecoding.DecodeUriComponent(System.String)">
            <summary>
            Decodes URI-escaped paths, throwing an exception if any encoding escape sequences are not complete octets or would result in invalid characters.
            This is based on the observed behavior of decodeURIComponent(path) in JavaScript.
            </summary>
            <returns>The path with any URI-escaped characters decoded.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the path could not be decoded because of containing any invalid characters.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Paths.PathValidation.ValidateAbsolutePath(System.String)">
            <summary>
            Checks if a path is a valid absolute path.
            </summary>
            <remarks>An invalid absolute path is either not rooted, or contains a segment referencing a parent directory: ".."</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Paths.PathValidation.PathShouldBeIgnoredForExclusion(System.String)">
            <summary>
            Returns true if the path should be completely ignored and not processed for content exclusion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitConfigData">
            <summary>
            A git repository's configuration in the form of keys and their values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.GitConfigData.GetSectionNames(System.String,System.String)">
            <summary>
            This obtains all the distinct parts of all sections that both begin with a base and end with a key.
            </summary>
            <param name="baseName">A common base section name.</param>
            <param name="withKey">The key to filter by</param>
            <returns>The part of all matching section names after the base and not including the key.</returns>
            <remarks>If you have two keys defined with fully qualified names 'remote.a.url' and 'remote.b.url', this returns [a,b].</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitConfigLoader">
            <summary>
            Loads the git config for a repository at a path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser">
            <summary>
            Parses a git remote url. This partial class is split between the parsing itself, lazy-parsing url construction, and private data types used to represent information derived from parsing a url.
            </summary>
            <remarks>
            The parsing is based on implementation in the copilot-client repo, see remarks on <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager" /> for more info.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser.CreateUrl(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl" /> which is parsed lazily one time if any of its properties are accessed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser.ParseUrl(System.String)">
            <summary>
            Parses a URL string. This should not be called directly, construct a <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl" /> which will call this method once and cache the result.
            </summary>
            <remarks>This is public so that unit tests can assert how many times it's called.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser.ParsePath(System.String,Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser.ParsedHostname,Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser.ParsedScheme,Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser.RemoteKind)">
            Conditionally URL-decodes the path. Decoding is performed only for ADO
            ShortSSH URLs. This is a special case for that provider, as they are
            known to encode spaces in the path when providing a copiable SSH URL
            for cloning.
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteResolver">
            <summary>
            Reads a git repo's config to determine which remote url should be used for exclusion rules, and returns a lazily-parsing url representation.
            </summary>
            <remarks>
            Based on implementation in the copilot-client repo, see remarks on <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager" /> for more info.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteResolver.#ctor(Microsoft.VisualStudio.Copilot.Core.Repository.GitConfigLoader,Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser)">
            <summary>
            Reads a git repo's config to determine which remote url should be used for exclusion rules, and returns a lazily-parsing url representation.
            </summary>
            <remarks>
            Based on implementation in the copilot-client repo, see remarks on <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager" /> for more info.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl">
            <summary>
            Represents a remote URL for a git repository. Implemented and obtainable from a <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser" />
            Implements value equality based on the exact input url string only, mainly for use with caching.
            </summary>
            <remarks>
            Based on implementation in the copilot-client repo, see remarks on <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager" /> for more info.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl.#ctor(System.String)">
            <summary>
            Represents a remote URL for a git repository. Implemented and obtainable from a <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser" />
            Implements value equality based on the exact input url string only, mainly for use with caching.
            </summary>
            <remarks>
            Based on implementation in the copilot-client repo, see remarks on <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager" /> for more info.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl.Url">
            <summary>
            The URL of the remote. This is used for the class's equality and hash code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRepositoryExclusionRuleDomain">
            <summary>
            An exclusion rule domain for a single git repository. Used to determine how to obtain a repo's exclusion rules, file paths that belong to repos are assigned to instances of this.
            </summary>
            <remarks>
            Based on implementation in the copilot-client repo, see remarks on <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager" /> for more info.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.IRepositoryManager">
            <summary>
            Responsible for taking in a directory path and determining which repo it belongs to if any, and returning information about that repo.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.IRepositoryManager.GetRepoAsync(Microsoft.VisualStudio.Copilot.Core.AbsolutePath,System.Threading.CancellationToken)">
            <summary>
            Obtain the repo for a specified path.
            </summary>
            <param name="directoryPath">The path to search for a repo for.</param>
            <param name="cancellationToken">Cancellation for the operation.</param>
            <returns>The found git repository if one existed, or null.</returns>
            <remarks>
            The specified path will be cached so repeat requests for the same path will be quicker.
            Callers should strongly prefer calling this method with directory paths and not individual files,
            so that fewer cache items are created and they can be reused for longer.
            Every file in a directory must belong to the same repo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.IRepositoryManagerFactory">
            <summary>
            Factory that constructs IRepositoryManager instances, allowing some dependencies that are not available in this project to be injected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager">
            <remarks>
            Along with much of <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl" />, <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser" />, <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteResolver" /> and <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRepositoryExclusionRuleDomain" />,
            this is based on a TypeScript implementation in the copilot-client repo at https://github.com/github/copilot-client/tree/main/lib/src/repository
            at commit c4331cfe1631889eb5f99ba5f2945249382c8d00 on 2024/8/16.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager.#ctor(Microsoft.VisualStudio.Copilot.Core.GenericUtilities.IMapCache{Microsoft.VisualStudio.Copilot.Core.AbsolutePath,Microsoft.VisualStudio.Copilot.Core.Repository.GitRepositoryExclusionRuleDomain},Microsoft.VisualStudio.Copilot.Core.AbstractRepoFileSystem,Microsoft.VisualStudio.Copilot.Core.Repository.GitConfigLoader,Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser,System.Diagnostics.TraceSource)">
            <remarks>
            Along with much of <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteUrl" />, <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteParser" />, <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRemoteResolver" /> and <see cref="T:Microsoft.VisualStudio.Copilot.Core.Repository.GitRepositoryExclusionRuleDomain" />,
            this is based on a TypeScript implementation in the copilot-client repo at https://github.com/github/copilot-client/tree/main/lib/src/repository
            at commit c4331cfe1631889eb5f99ba5f2945249382c8d00 on 2024/8/16.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.Repository.RepositoryManager.GetRepoAsync(Microsoft.VisualStudio.Copilot.Core.AbsolutePath,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.ServiceProxyOrRental`1">
            <summary>
            Struct for wrapping a service proxy or rental to be passed in from a variety of locations that may use either IServiceBroker or ServiceBrokerClient.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.ShutdownTokenAttribute">
            <summary>
            Attribute for importing an appropriate shutdown token in the current process.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.DataSources.CopilotOptionsPromptDataSource">
            <summary>
            Represents a data source for prompts that is backed by Copilot options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.DataSources.CopilotOptionsPromptDataSource.#ctor(Conversations.Shared.Options.IMarshaledCopilotOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.DataSources.CopilotOptionsPromptDataSource" /> class.
            </summary>
            <param name="copilotOptions">The Copilot options to use as a data source.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource">
            <summary>
            Represents a data source for prompts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource.Name">
            <summary>
            Gets the name of the data source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource.GetPrompt(System.String)">
            <summary>
            Retrieves a prompt of the specified type with the specified name.
            </summary>
            <param name="name">The name of the prompt to retrieve.</param>
            <returns>The prompt of the specified type with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the data source asynchronously.
            </summary>
            <param name="cancellation">The cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager">
            <summary>
            Manages prompts by initializing and retrieving them from various data sources.
            </summary>
            <remarks>
            This class is a singleton and should be initialized by calling one of the static initialization methods, such as <see cref="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.InitializeAsync(System.Threading.CancellationToken)" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.Instance">
            <summary>
            Gets the singleton instance of the PromptManager.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the PromptManager instance was never initialized.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Ensures the PromptManager is initialized with no external data sources.
            </summary>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.InitializeAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource},System.Threading.CancellationToken)">
            <summary>
            Ensures the PromptManager is initialized with the provided data sources.
            </summary>
            <param name="sources">The data sources to initialize the PromptManager with.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.InitializeAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource},Microsoft.VisualStudio.Copilot.Core.PromptManager.IPromptDataSource,System.Threading.CancellationToken)">
            <summary>
            Ensures the PromptManager is initialized with the provided external data sources and a default data source.
            </summary>
            <param name="sources">The data sources to initialize the PromptManager with.</param>
            <param name="defaultSource">The data source that provides the default definitions of prompts.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.GetValue(System.String)">
            <summary>
            Retrieves a prompt of the specified type with the specified name.
            </summary>
            <param name="name">The name of the prompt to retrieve.</param>
            <returns>The prompt of the specified type with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the prompt with the specified name is not found.</exception>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.DefaultPrompts">
             <summary>
             This list contains all of the available prompts.
             </summary>
             <remarks>
                 Instructions to Add a New Prompt:
                     1) Add a new entry to <see cref="F:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.DefaultPrompts" />.
                     2) Add a new static property to an existing or new <see cref="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.Prompts" />) partial class.
            
                 At runtime, the value of the prompt that will be used will be the one defined here,
                 unless <see cref="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager" /> is provided an overridden value.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameterConstants">
            <summary>
            Constants for prompt parameters.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters">
            <summary>
            Represents a collection of prompt parameters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters" /> class.
            </summary>
            <remarks>
            The keys in the dictionary are case-insensitive.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.ParameterPattern">
            <summary>
            The pattern used to match parameters in the prompt template.
            </summary>
            <remarks>
            Examples: {PARAMETER}, {PARAMETER_1}, {PARAMETER-2}
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Name">
            <summary>
            Gets the name of the prompt.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Template">
            <summary>
            Gets the default template for the prompt.
            This template will be used if no overrides are specified in <see cref="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.ModelOverrides" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.MaxDepth">
            <summary>
            Gets the maximum depth to resolve the prompt template.
            A <see cref="T:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptException" /> is thrown when this depth is reached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.ModelOverrides">
            <summary>
            Gets the override templates for specific models.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager)">
            <summary>
            Builds the prompt by replacing the parameters in the prompt template.
            </summary>
            <param name="model">The model to use for resolving the prompt template.</param>
            <param name="parameters">An optional dictionary of parameters to replace in the prompt template.</param>
            <param name="promptManager">An optional prompt manager to use for retrieving prompts. If <see langword="null" />, then <see cref="P:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager.Instance" /> will be used.</param>
            <returns>The built prompt.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptTemplate.Build(Microsoft.VisualStudio.Copilot.CopilotModel,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptParameters,Microsoft.VisualStudio.Copilot.Core.PromptManager.PromptManager)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.TaskStatusCenterTracker">
            <summary>
            Class for tracking the status of a long-running task in the Task Status Center &amp; allowing it to be user-cancelable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Core.TaskStatusCenterTracker.WithReporter(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.VisualStudio.RpcContracts.ProgressReporting.ProgressStatus}},System.Nullable{System.TimeSpan})">
            <summary>
            Registers a task to be polled periodically for a status update, to display in the Task Status Center.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.TaskStatusCenterTracker.Options.ComponentDisplayName">
            <summary>
            Gets the display name of the component that is performing the work.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.TaskStatusCenterTracker.Options.WorkDisplayName">
            <summary>
            Gets a displayable name for the work being performed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.TaskStatusCenterTracker.Options.DebugOnly">
            <summary>
            Whether this tracker should only be visible in the Task Status Center during debug builds. If true, during release builds, it will simply pass through the provided cancellation token.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryCategories.Serialization">
            <summary>
            Serialization library category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryCategories.UIFramework">
            <summary>
            UI Framework library category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryCategories.Logging">
            <summary>
            Logging library category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryCategories.AzureFunctions">
            <summary>
            Azure Functions library category
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryCategories.General">
            <summary>
            General library category for uncategorized libraries
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes">
            <summary>
            Defines the various library types.
            When promptified the enum value is converted to a string with underscores replaced with spaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes.Newtonsoft_Json">
            <summary>
            Represents Newtonsoft.Json library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes.System_Text_Json">
            <summary>
            Represents System.Text.Json library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes.MudBlazor">
            <summary>
            Represents MudBlazor library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes.Serilog">
            <summary>
            Represents Serilog library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes.Microsoft_Azure_WebJobs">
            <summary>
            Represents Microsoft.Azure.WebJobs library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.Core.Traits.Common.LibraryTypes.Microsoft_Azure_Functions_Worker">
            <summary>
            Represents Microsoft.Azure.Functions.Worker library
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.ActiveFileContextDescription">
            <summary>Active document</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.ErrorsScopeDescription">
            <summary>Provided file errors</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.HighlightedSelectionContextDescription">
            <summary>Selection</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.SolutionScopeDescription">
            <summary>Refer to your solution</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.AskVSAgentName">
            <summary>VS</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.AskVSAgentShortDescription">
            <summary>Ask questions about Visual Studio</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.AskVSAgentDescription">
            <summary>Ask questions about Visual Studio</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.ActiveException">
            <summary>Active Exception</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.DeadlockInformation">
            <summary>Deadlock Information</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CallStackFrames">
            <summary>Call Stack Frames</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.LocalVariableValues">
            <summary>Local Variable Values</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.ExcludedFileNotification">
            <summary>Your {0} '{1}' has excluded this file ({2}) from Copilot Chat context.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.ExclusionRulesLoadingFailure">
            <summary>Failed to load the active repos. All files will be excluded.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.ExcludedFileTextBasedNotification">
            <summary>Your {0}'{1}' has excluded this file ({2}) from Copilot Chat context due to text-based rules.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.TextSearchSearching">
            <summary>Searching solution...</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.TextSearchLoading">
            <summary>Loading search results...</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.TextSearchError">
            <summary>Search failed</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.TextSearchComplete">
            <summary>Found {0} result(s)</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.VsSearchSearching">
            <summary>Searching Visual Studio for {0}</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.VsSearchSearched">
            <summary>Searched Visual Studio for {0}</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.FunctionContextLoading">
            <summary>Getting {0}...</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsProgressCreatingPlan">
            <summary>Creating a plan</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsProgressPlanCreationFailed">
            <summary>Plan creation failed</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsResponsePlanCreationFailed">
            <summary>Failed to generate a plan. Please retry with a different request.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsProgressGeneratingEdits">
            <summary>Generating edits</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsProgressNoEditsGenerated">
            <summary>No edits generated</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsResponseNoEditsGenerated">
            <summary>No code changes generated.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsProgressEditsGenerated">
            <summary>Edits generated</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.Core.Resources.CopilotEditsIterationTemplate">
            <summary>Iteration {0}</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.Implementation.CodeMapperProvider">
            <summary>
            This service provides access to CodeMappers and Legacy CodeMappers.
            CodeMappers are used to Replace or Insert code onto a target document.
            Legacy CodeMappers will be removed eventually, as they also need to be changed to the
            new format, but for now I will leave them there as they do provide some functionality for
            unit tests mappings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingManager">
            <summary>
            Manages code mapping between source and target programming languages.
            This will serve as a layer for smart handling of the multiple mappers in conjunction with the diff mapper
            and enable us to pick the best choice for the situation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingManager.GetMappedEditsAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CopilotContentCodePart},Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets the mapped edits for a given target, and a given copilot content code part.
            In the background this will use both the language mapper (if any) and the fallback mapper to determine
            the best action case for the mapping.
            </summary>
            <param name="target">The target mapping.</param>
            <param name="contentBlocks">The code content blocks to map.</param>
            <param name="mappingOptions"><see cref="T:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions" /> Represents the configurable options for the code mapper.</param>
            <param name="correlationId"><see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> A correlation id to correlate telemetry from the mapper with telemetry from the client.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The mapped edits.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingManager.MapToSelectionAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,Microsoft.VisualStudio.Copilot.CopilotContentCodePart,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingManager.GetAppropriateMapper(Microsoft.VisualStudio.Copilot.CopilotContentCodePart)">
            <summary>
            This will attempt to obtain a language mapper.
            </summary>
            <param name="content">The content from copilot.</param>
            <returns>Returns the most appropriate mapper for the situation. If no language mapper is found null will be returned instead.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions">
            <summary>
            Represents the configurable options for code mapping.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions.FilterEmptyEdits">
            <summary>
            Gets or sets a value indicating whether to filter out empty edits.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions.FilterRejectedEdits">
            <summary>
            Gets or sets a value indicating whether to filter out new file edits.
            </summary>
            <remarks>
            This will filter out edits which contain a Uri of value <see cref="F:Conversations.Shared.GlobalUriConstants.FileNew" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.DiffCodeMapper.MapToSelectionAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the given code block can be mapped to the specified selection target.
            </summary>
            <param name="target">The mapping target.</param>
            <param name="codeBlock">The code block to map.</param>
            <param name="cancellation">The cancellation token.</param>
            <returns>The resulting mapped edits. Or empty when it can't be mapped to selection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.Formatters.CSharpFormatter.FormatTextEditAsync(Microsoft.VisualStudio.Copilot.Internal.TextEdit,Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <summary>
            This method does formatting for C# files that are part of a workspace
            </summary>
            <param name="textEdit">the TextEdit to format.</param>
            <param name="snapshot">The text snapshot</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.Formatters.GenericFormatter">
            <summary>
            The GenericFormatter implements the IFormatTextEditProvider interface to provide
            language-agnostic formatting using VS editor tools.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.Formatters.GenericFormatter.#ctor(Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.CodeMappers.Formatters.GenericFormatter" /> class.
            </summary>
            <param name="bufferTagAggregatorFactory">The buffer tag aggregator factory.</param>
            <param name="jtf">The joinable task factory.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.Formatters.GenericFormatter.FormatTextEditAsync(Microsoft.VisualStudio.Copilot.Internal.TextEdit,Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.Formatters.GenericFormatter.GetIndentationForLineUsingStructureTagsAsync(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Threading.CancellationToken)">
            <summary>
            Gets the indentation for a specific line using structure tags.
            </summary>
            <param name="line">The line to get indentation for.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The indentation value for the line.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.GptCodeMapper.MapAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,System.Collections.Generic.IReadOnlyList{System.String},System.Guid,System.Threading.CancellationToken)">
            <summary>
            Map Async implementation that uses gpt-4o-mini model.
            </summary>
            <param name="target">The mapping target.</param>
            <param name="codeBlocks">List of code blocks to map.</param>
            <param name="correlationId">Correlation id</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A list of mapped edits.</returns>
            <remarks>
            This is Prototype code and it is highly unstable, prone to fail in edge cases.
            This code is not production ready and should not be used in production.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.GptCodeMapper.MapAsync(Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IReadOnlyList{System.String},System.String,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Action{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Int32,System.Double},System.Threading.CancellationToken)">
            <summary>
            Map Async implementation that uses gpt-4o-mini model.
            </summary>
            <param name="target">The target snapshot.</param>
            <param name="codeBlocks">List of code blocks to map.</param>
            <param name="languageName">The name of the language of the document.</param>
            <param name="correlationId">Correlation id</param>
            <param name="onEditsUpdated">An action that will be triggered every times new edits are discovered by the mapper as the streaming gets in.
            This action will also be invoked with an empty list of edits when mapping starts.</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A list of mapped edits.</returns>
            <remarks>
            This is Prototype code and it is highly unstable, prone to fail in edge cases.
            This code is not production ready and should not be used in production.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMapperRegistry">
            <summary>
            Defines a registry for obtaining language-specific code mappers from a content part or content type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMapperRegistry.GetMapper(Microsoft.VisualStudio.Copilot.CopilotContentCodePart)">
            <summary>
            Obtains a language-specific code mapper that supports the specified content code part.
            </summary>
            <param name="part">The content code part to obtain a code mapper for.</param>
            <returns>A code mapper that supports the specified content code part, or <c>null</c> if no such mapper can be found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMapperRegistry.GetMapper(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Obtains a language-specific code mapper that supports the specified content type.
            </summary>
            <param name="contentType">The content type to obtain a code mapper for.</param>
            <returns>A code mapper that supports the specified content type, or <c>null</c> if no such mapper can be found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMapperRegistry.GetFallbackMapper">
            <summary>
            Obtains a fallback code mapper that should be able to support any type of content type.
            </summary>
            <returns>A fallback code mapper that supports the default content type, or <c>null</c> if no such mapper can be found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMappingManager">
            <summary>
            Defines a registry for obtaining language-specific code mappers from a content part or content type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMappingManager.GetMappedEditsAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Copilot.CopilotContentCodePart},Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            This manager handles all heuristics and logic behind mapping implementation for a given target and content.
            </summary>
            <param name="target">The mapping target.</param>
            <param name="contentBlocks">The content blocks from copilot.</param>
            <param name="mappingOptions"><see cref="T:Microsoft.VisualStudio.Copilot.CodeMappers.CodeMappingOptions" /> Represents the configurable options for the code mapper.</param>
            <param name="correlationId"><see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> A correlation id to correlate telemetry from the mapper with telemetry from the client.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Returns the mapped edits for the given code blocks and the given mapping target.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMappingManager.MapToSelectionAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,Microsoft.VisualStudio.Copilot.CopilotContentCodePart,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Maps the given code part to the specified mapping target.
            </summary>
            <param name="target">The mapping target.</param>
            <param name="codePart">The code part to map.</param>
            <param name="correlationId"><see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> A correlation id to correlate telemetry from the mapper with telemetry from the client.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Returns the mapped edits for the given code part and the given mapping target.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMappingManager.MapAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,System.Collections.Generic.IReadOnlyList{System.String},System.String,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Action{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Int32,System.Double},System.Threading.CancellationToken)">
            <summary>
            Maps the given code blocks to the specified mapping target.
            </summary>
            <param name="target">The mapping target.</param>
            <param name="codeBlocks">The code blocks to map.</param>
            <param name="languageName">The language of the code blocks</param>
            <param name="correlationId"><see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> A correlation id to correlate telemetry from the mapper with telemetry from the client.</param>
            <param name="onEditsUpdated">An action that will be triggered every times new edits are discovered by the mapper as the streaming gets in.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Returns the mapped edits for the given code blocks and the given mapping target.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.TextDifferencing.SourceTextDiffer.RentArray(System.Int32)">
            <summary>
             Rents a char array of at least <paramref name="minimumLength" /> from the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.TextDifferencing.SourceTextDiffer.ReturnArray(System.Char[],System.Boolean)">
            <summary>
             Returns a char array to the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.TextDifferencing.SourceTextDiffer.EnsureBuffer(System.Char[]@,System.Int32)">
            <summary>
             Ensures that <paramref name="array" /> references a char array of at least <paramref name="minimumLength" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CodeMappers.TextDifferencing.TextDiffer.IntArray">
            <summary>
             This is a simple wrapper for either a single small int array, or
             an array of int array pages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.TextDifferencing.TextDiffer.IntArray.RentArray(System.Int32)">
            <summary>
             Rents an int array of at least <paramref name="minimumLength" /> from the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CodeMappers.TextDifferencing.TextDiffer.IntArray.ReturnArray(System.Int32[],System.Boolean)">
            <summary>
             Returns an int array to the shared array pool.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ContextEvaluator.PromptifyAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.VisualStudio.Copilot.CopilotPromptOptions,System.Threading.CancellationToken)">
            <summary>
            Promptifies a single context object without reduction.
            </summary>
            <exception cref="T:System.ArgumentException">If <see cref="P:Microsoft.VisualStudio.Copilot.CopilotPromptOptions.TokenBudget" /> is &gt; 0.</exception>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ContextEvaluator.batchReduceBans">
            <summary>
            Bans a service from being used for a specific contract.
            </summary>
            <remarks>
            The reason why this was added is because we don't want to keep on activating a service to check if it is
            implementing a contract to batch reduce. Having a hash map makes it a bit easier to just check if a service
            has already failed. If it did, we just leave it out of the list of services to activate and try to batch reduce.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextPromptification.Context">
            <summary>
            The context object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotContextPromptification.Content">
            <summary>
            Gets the context content promptification, excluding headers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotDefaultOrchestrator">
            <inheritdoc cref="T:Microsoft.VisualStudio.Copilot.ICopilotRequestOrchestrator" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState">
            <summary>
            Represents the state of the cached exclusion rules.
            </summary>
            <remarks><see cref="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState.CacheHitCount" /> is deprecated and will be removed in the future.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState.#ctor(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesLoadingStatus,Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Represents the state of the cached exclusion rules.
            </summary>
            <remarks><see cref="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState.CacheHitCount" /> is deprecated and will be removed in the future.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState.NotApplicableRulesState">
            <summary>
            A rule state for domains for which remotely loaded rules are not applicable, one possible reason being because the domain excludes any files contained in it. The cache should never transition in or out of this state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState.IsCacheValid">
            <summary>
            Gets a value indicating whether the cached exclusion rules are valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRule">
            <summary>
             The exclusion rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRule.Paths">
            <summary>
            Gets or sets the paths to exclude.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRule.Source">
            <summary>
            Gets or sets the source of the exclusion rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRule.IfNoneMatch">
            <summary>
            Gets or sets the IfNoneMatch regular expressions.
            Files that do not match any of these regular expressions will be excluded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRule.IfAnyMatch">
            <summary>
            Gets or sets the IfAnyMatch regular expressions.
            Files that match any of these regular expressions will be excluded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheInvalidatingReason">
            <summary>
            Enum for the invalidating reasons for the exclusion rules cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheManager">
            <summary>
            Manages the cache for the exclusion rules.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheManager.TryGetExclusionRulesFromCache">
            <summary>
            Tries to get the exclusion rules state from the cache (if valid).
            </summary>
            <returns>The cached exclusion rules set if valid</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheManager.RefreshCache(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet)">
            <summary>
            Refreshes the exclusion rules cache.
            </summary>
            <param name="exclusionRuleSet">The exclusion rule set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheManager.RefreshCache(Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState)">
            <summary>
            Refreshes the cache explicitly.
            </summary>
            <remarks>Added for testing purposes.</remarks>
            <param name="cachedCopilotExclusionRulesState"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheManager.InvalidateCache(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheInvalidatingReason)">
            <summary>
            Invalidates the exclusion rules cache.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.TraceAllEvaluations">
            <summary>
            Whether to write traces for all evaluations. Useful for debugging unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.CheckIfAnyExclusionRuleAppliesAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainWithRules},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks if any exclusion rule applies to the file.
            </summary>
            <param name="filePath">Path to the file to check.</param>
            <param name="domainsWithRuleState">Domains to use when checking for whether the file is excluded, and their rules.</param>
            <param name="shouldExcludeOnFileContents">Whether to exclude files based on contents.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.GetExcludedFilesAsync(Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionCheckerBatch,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded files within a files list based on the exclusion rules set passed.
            </summary>
            <param name="inputs">A set of file paths that have been mapped to rules.</param>
            <param name="shouldExcludeOnFileContents">Whether to exclude files based on contents.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>returns the excluded files within a list of files.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.CheckBeforeEvaluationExclusion(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainWithRules})">
            <summary>
            Quick check for whether any of the domains would exclude assigned files simply by being present.
            </summary>
            <remarks>Short-circuiting checks should never *include* a file. A returned value that indicates the files are not excluded will be ignored.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.EvaluateFileExclusionAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainWithRules},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Evaluate whether a single file is excluded.
            </summary>
            <returns>The file's path if it's excluded, null if it is not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.EvaluatePathRulesAsync(System.String,Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet,System.Threading.CancellationToken)">
            <summary>
            Evaluate path-based rules for a transformed path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.EvaluationResult.WriteTraceMessage(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Writes a trace message for this evaluation result. This will be called only once per unique result, there is no need to check for repeat invocations internally.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByLoggedError">
            <summary>
            A result indicating that a file should be excluded, and that the exclusion was due to a previously logged error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByLoggedError.#ctor">
            <summary>
            A result indicating that a file should be excluded, and that the exclusion was due to a previously logged error.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.NotExcludedResult">
            <summary>
            A result indicating that a file should not be excluded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.NotExcludedResult.#ctor">
            <summary>
            A result indicating that a file should not be excluded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByPathRule">
            <summary>
            A result indicating a file should be excluded because it matched an exclusion path rule.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByPathRule.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSource)">
            <summary>
            A result indicating a file should be excluded because it matched an exclusion path rule.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByContentRule">
            <summary>
            A result indicating a file should be excluded because it matched an exclusion content rule.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByContentRule.#ctor(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSource)">
            <summary>
            A result indicating a file should be excluded because it matched an exclusion content rule.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByDomainMembership">
            <summary>
            A result indicating a file should be excluded because of one or more of the domains it's a member of.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByDomainMembership.#ctor(Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleDomain)">
            <summary>
            A result indicating a file should be excluded because of one or more of the domains it's a member of.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByInvalidRuleState">
            <summary>
            A result indicating a file should be excluded because the cached rule state could not be evaluated.
            </summary>
            <param name="RuleState"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByInvalidRuleState.#ctor(Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState)">
            <summary>
            A result indicating a file should be excluded because the cached rule state could not be evaluated.
            </summary>
            <param name="RuleState"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesChecker.ExcludedByInvalidRuleState.RuleState">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet">
            <summary>
            The exclusion rule set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet.Rules">
            <summary>
            The exclusion rules.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet.LastUpdatedAt">
            <summary>
            The last time the rules were updated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet.Scope">
            <summary>
            Gets or sets the scope of the exclusion rule. (repo - all)
            The scope value is repo: means the rules contain both the rules that are defined specific for the repo(defined in the repo settings and org settings) and the all-files(*) defined in the organization settings
            The scope value is all: means the rules are defined on the organization level
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSource">
            <summary>
            The source of the exclusion rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSource.Name">
            <summary>
            Gets or sets the name of the source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSource.Type">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper">
            <summary>
            Maps individual file paths to rule domains, which are used in the next phase to gather any rules that need to be applied to those paths.
            </summary>
            <remarks>
            If an exception is thrown, a batch request to <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotExclusionService" /> will have *all* the requested paths excluded, even if other paths were mappable.
            Exceptions should only be thrown here if there's an issue that makes it impossible to *accurately* path(s) to domains.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper.MapFilePathToDomainsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Maps a file path to a rule domain.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper.MapFilePathsToRuleDomainsAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Maps file paths to rule domains. Every input file path will be mapped to one or more domains.
            </summary>
            <remarks>
            Much of the complexity here is related to deduplicating directories before mapping them to rule domains. See <see cref="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper.MapFilePathToDomainsAsync(System.String,System.Threading.CancellationToken)" /> which does the same operation but on a single path.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper.GetPathForMapping(Microsoft.VisualStudio.Copilot.Core.AbstractRepoFileSystem,System.String)">
            <summary>
            Transform the provided path for efficiently mapping to a rule domain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper.DomainMappedFilePaths">
            <summary>
            File paths that have been mapped to rule domains. Every input file path will be mapped to one or more domains.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainMapper.DomainMappedFilePaths.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleDomain},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            File paths that have been mapped to rule domains. Every input file path will be mapped to one or more domains.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleCacheSnapshot">
            <summary>
            Represents the state of the cached exclusion rules.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleCacheSnapshot.#ctor(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesLoadingStatus,Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet,System.DateTime,System.DateTime)">
            <summary>
            Represents the state of the cached exclusion rules.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleCacheSnapshot.IsCacheValid">
            <summary>
            Gets a value indicating whether the cached exclusion rules are valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleDomain">
            <summary>
            An exclusion rule domain is something that files belong to one or more of, and which may have corresponding exclusion rules to evaluate.
            Depending on the result of evaluating those rules, those files may be excluded from use in Copilot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleDomain.ToLogString">
            <summary>
            Returns a human readable string describing the domain that can be shown in logs, but will not be shown directly in ui.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleDomain.TransformPathForDomain(System.String)">
            <summary>
            Transform the path to match rules for the domain.
            In cases where the domain corresponds to an on-disk location (like a git repository),
            this should return a path based at the repo root, for evaluating repo-rooted patterns.
            </summary>
            <remarks>Throwing an exception from here will cause the path to be excluded, but other paths in a batch request will not be excluded.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionRuleDomain.SkipEvaluationAndAlwaysExclude">
            <summary>
            If a path belongs to a domain with this set, skip evaluating any rules and just exclude it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.AlwaysExcludeExclusionRuleDomain">
            <summary>
            An exclusion rule domain which always excludes all files belonging to it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.FileNotFoundDomain">
            <summary>
            An exclusion rule domain for files that couldn't be located on disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.FileNotFoundDomain.#ctor(System.String)">
            <summary>
            An exclusion rule domain for files that couldn't be located on disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesCacheManager">
            <summary>
            Manages the cache for the exclusion rules.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesCacheManager.RefreshCache(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRuleSet)">
            <summary>
            Refreshes the exclusion rules cache.
            </summary>
            <param name="ruleSet"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesCacheManager.TryGetExclusionRulesFromCache">
            <summary>
            Tries to get the exclusion rules from the cache (if valid).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesCacheManager.InvalidateCache(Microsoft.VisualStudio.Copilot.CopilotExclusion.CopilotExclusionRulesCacheInvalidatingReason)">
            <summary>
            Invalidates the cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesCacheManager.RefreshCache(Microsoft.VisualStudio.Copilot.CopilotExclusion.CachedCopilotExclusionRulesState)">
            <summary>
            Refreshes the cache explicitly.
            </summary>
            <remarks>Added for testing purposes.</remarks>
            <param name="cachedCopilotExclusionRulesState"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesChecker.CheckIfAnyExclusionRuleAppliesAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotExclusion.DomainWithRules},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks if any exclusion rule applies to the file.
            </summary>
            <param name="filePath">Path to the file to check.</param>
            <param name="domainsWithRuleState">Domains to use when checking for whether the file is excluded, and their rules.</param>
            <param name="shouldExcludeOnFileContents">Whether to exclude files based on contents.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesChecker.GetExcludedFilesAsync(Microsoft.VisualStudio.Copilot.CopilotExclusion.ExclusionCheckerBatch,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the excluded files within a files list based on the exclusion rules set passed.
            </summary>
            <param name="inputs">A set of file paths that have been mapped to rules.</param>
            <param name="shouldExcludeOnFileContents">Whether to exclude files based on contents.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>returns the excluded files within a list of files.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusion.ICopilotExclusionRulesLoader.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Loads the exclusion rules  for the repository of the current workspace from the cache if valid, otherwise queries GitHub for the exclusion rules.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusion.NoRepoExclusionRuleDomain">
            <summary>
            An exclusion rule domain for files that do not belong to a git repository.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusionService">
            <summary>
            Service for managing the exclusion of content in Copilot Chat.
            </summary>
            <remarks>
            This service provides methods to check if a file or any file in a solution is excluded.
            It also provides a method to check the exclusion status for a list of files.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusionService.Moniker">
            <summary>
            Gets the service moniker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CopilotExclusionService.Descriptor">
            <summary>
            Gets the service RPC descriptor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.IsFileExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a specific file is excluded.
            </summary>
            <param name="filePath">The path of the file to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A boolean value indicating whether the file is excluded or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.IsAnyExclusionRulesAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if the active workspace has any exclusion rules.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A boolean value indicating whether any file is excluded within the active workspace.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.IsAnyFileExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the provided workspace has any exclusion rules
            </summary>
            <param name="workspacePath">The path of the workspace to check for excluded files.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A boolean value indicating whether any file is excluded.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.GetExcludedFilesAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the excluded files from a list of files.
            </summary>
            <param name="filesPaths">A list of file paths to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A HashSet for the excluded files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.IsContextExcludedAsync(Microsoft.VisualStudio.Copilot.CopilotContext,System.Threading.CancellationToken)">
            <summary>
            Checks if the context should be excluded by Copilot exclusion rules.
            </summary>
            <param name="context">Copilot context to check for exclusion.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>bool indicating whether the file withing the CopilotValue should be excluded or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.GetExcludedContextsAsync(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.CopilotContext},System.Threading.CancellationToken)">
            <summary>
            Gets the excluded contexts from a list of contexts.
            </summary>
            <param name="contexts">A list of copilot contexts to check for exclusion.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A HashSet for the excluded contexts.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.ScreenRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,System.Threading.CancellationToken)">
            <summary>
            Screens the request context list to exclude the context that refers to files that should be excluded by Copilot exclusion rules.
            </summary>
            <param name="copilotRequest"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.IsFileExcludedAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks if the a specific file is excluded.
            </summary>
            <remarks>WARNING: This will ignore any text-based exclusion rules if <paramref name="shouldConsiderFileContents" /> is false. This function was primarily built to avoid a massive performance hit to the completions list in the chat window.</remarks>
            <param name="filePath">The path of the file to check for exclusion.</param>
            <param name="shouldConsiderFileContents">Whether to consider the file contents for exclusion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionService.GetExcludedFilesAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded files in a collection of files.
            </summary>
            <remarks>WARNING: This will ignore any text-based exclusion rules if <paramref name="shouldConsiderFileContents" /> is false. This function was primarily built to avoid a massive performance hit to the completions list in the chat window.</remarks>
            <param name="filePaths">A collection of file paths to check for exclusion.</param>
            <param name="shouldConsiderFileContents">Whether to consider the file contents for exclusion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusionService.State">
            <summary>
            Persistent state for <see cref="T:Microsoft.VisualStudio.Copilot.CopilotExclusionService" />. Because that's a brokered service, it is constructed anew each time a proxy is requested.
            This mef part contains all the state that is intended to last longer than an individual brokered service proxy's lifetime.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper">
            <summary>
            A helper Wrapper class for Copilot exclusion service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsFileExcludedAsync(System.String,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Checks if the file should be excluded by Copilot exclusion rules.(Gets an exclusion service proxy instance and perform that check)
            </summary>
            <param name="filePath">The file path.</param>
            <param name="options">Copilot options</param>
            <param name="serviceBrokerClient">Service broker client instance</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsFileExcludedBypassingTextBasedRulesAsync(System.String,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Checks if the file should be excluded by Copilot exclusion rules.(Gets an exclusion service proxy instance and perform that check).
            </summary>
            <remarks>WARNING: This will ignore any text-based exclusion rules. This function was primarily built to avoid a massive performance hit to the completions list in the chat window.</remarks>
            <param name="filePath"></param>
            <param name="options"></param>
            <param name="serviceBrokerClient"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsFileExcludedAsync(System.String,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Checks if the file should be excluded by Copilot exclusion rules.(Gets an exclusion service proxy instance and perform that check)
            </summary>
            <param name="filePath">The file path.</param>
            <param name="options">Copilot options</param>
            <param name="serviceBroker">Service broker</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsAnyExclusionRulesAsync(Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Checks if the current workspace has any exclusion rules.
            </summary>
            <param name="options"></param>
            <param name="serviceBrokerClient"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsAnyExclusionRulesAsync(Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Checks if the current workspace has any exclusion rules.
            </summary>
            <param name="options"></param>
            <param name="serviceBroker">Service broker</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.GetExcludedFilesAsync(System.Collections.Generic.IReadOnlyList{System.String},Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded files within a list of files.(Gets an exclusion service proxy instance and perform that check)
            </summary>
            <param name="filesPaths">A list of file names to check for exclusion.</param>
            <param name="options">Copilot options</param>
            <param name="serviceBrokerClient">Service broker client instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.GetExcludedFilesAsync(System.Collections.Generic.IReadOnlyList{System.String},Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded files within a list of files.(Gets an exclusion service proxy instance and perform that check)
            </summary>
            <param name="filesPaths">A list of file names to check for exclusion.</param>
            <param name="options">Copilot options</param>
            <param name="serviceBroker">Service broker</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsContextExcludedAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Checks if the context should be excluded by Copilot exclusion rules.
            </summary>
            <param name="copilotContext"></param>
            <param name="options">Copilot options</param>
            <param name="serviceBrokerClient">Service broker client instance</param>
            <param name="cancellationToken"></param>
            <returns>bool indicating whether the file withing the CopilotValue should be excluded or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.IsContextExcludedAsync(Microsoft.VisualStudio.Copilot.CopilotContext,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Checks if the context should be excluded by Copilot exclusion rules.
            </summary>
            <param name="copilotContext"></param>
            <param name="options">Copilot options</param>
            <param name="serviceBroker">Service broker</param>
            <param name="cancellationToken"></param>
            <returns>bool indicating whether the file withing the CopilotValue should be excluded or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.GetExcludedContextsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded contexts for a list of contexts.
            </summary>
            <param name="copilotContexts">A list of copilot contexts to check for exclusion.</param>
            <param name="options">Copilot options</param>
            <param name="serviceBrokerClient">Service broker client instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A collection for the excluded contexts.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.GetExcludedContextsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded contexts for a list of contexts.
            </summary>
            <param name="copilotContexts">A list of copilot contexts to check for exclusion.</param>
            <param name="options">Copilot options</param>
            <param name="serviceBroker">Service broker</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A collection for the excluded contexts.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.ScreenRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Threading.CancellationToken)">
            <summary>
            Screens the request context list to exclude the context that refers to files that should be excluded by Copilot exclusion rules.
            </summary>
            <param name="request"></param>
            <param name="options">Copilot options</param>
            <param name="serviceBrokerClient">Service broker client instance</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.CopilotExclusionServiceWrapper.ScreenRequestAsync(Microsoft.VisualStudio.Copilot.CopilotRequest,Conversations.Shared.Options.IMarshaledCopilotOptions,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Screens the request context list to exclude the context that refers to files that should be excluded by Copilot exclusion rules.
            </summary>
            <param name="request"></param>
            <param name="options">Copilot options</param>
            <param name="serviceBroker">Service broker</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.IInternalCopilotExclusionService">
            <summary>
            Internal service for managing the exclusion of content in Copilot Chat with additional control of the rules to evaluate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IInternalCopilotExclusionService.IsFileExcludedAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Checks if the a specific file is excluded.
            </summary>
            <param name="filePath">The path of the file to check for exclusion.</param>
            <param name="shouldConsiderFileContents">Whether to consider the file contents for exclusion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IInternalCopilotExclusionService.GetExcludedFilesAsync(System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the excluded files in a collection of files.
            </summary>
            <param name="filePaths">A collection of file paths to check for exclusion.</param>
            <param name="shouldConsiderFileContents">Whether to consider the file contents for exclusion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.CopilotRegistrationManager.agentsEver">
            <summary>
            A list of agents ever registered for telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CopilotWorkspaceContextProvider">
            <summary>
            This context provider is a placeholder so that we can create <see cref="T:Microsoft.VisualStudio.Copilot.CopilotWorkspaceContext" /> and embed it
            into the current system.
            </summary>
            <remarks>
            We call it a placeholder because if you look at the current implementation it is actually not doing anything, and it doesn't support
            returning context as a context provider. This is because the context is already provided by the scope, but a context provider is still
            required to be registered in the system.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState">
            <summary>
            Editing workflow states for snippets that Copilot is suggesting across multiple files.
            For more detail about these states, see:
            <list type="bullet">
            <item><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped">not mapped</see></item>
            <item><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping">mapping</see></item>
            <item><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped">mapped</see></item>
            <item><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing">reviewing</see></item>
            <item><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.InactiveReview">inactive review</see></item>
            <item><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed">completed</see></item>
            </list>
            </summary>
            <remarks>
            Valid state transitions may be enforced by the presence (or lack thereof) of constructors that take the previous state.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped">
            <summary>
            File with snippets associated to it, the snippets have not been mapped to locations in the file yet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping">
            <summary>
            File is in the middle of mapping snippets to a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> snapshot, the outcome of which will be a set of <see cref="T:Microsoft.VisualStudio.Text.ITextEdit" /> which will be stored in a <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> state.
            </summary>
            <remarks>This state has interior mutability and will update as <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping.MappingProgress">mapping progresses</see>, raising <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            File is in the middle of mapping snippets to a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> snapshot, the outcome of which will be a set of <see cref="T:Microsoft.VisualStudio.Text.ITextEdit" /> which will be stored in a <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> state.
            </summary>
            <remarks>This state has interior mutability and will update as <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping.MappingProgress">mapping progresses</see>, raising <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping.MappingProgress">
            <summary>
            Current progress of mapping the edit. 0.0-100.0 double value.
            </summary>
            <remarks>Updates during mapping, raising <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping.TargetSnapshot">
            <summary>
            The current snapshot of the file that is being targeted for code mapping, at the time mapping began.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping.UpdateProgress(System.Double)">
            <summary>
            Updates the progress of mapping, allowing the UI to reflect it.
            </summary>
            <param name="newProgress">0-100.0 double value representing what percentage of the document has been mapped.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped">
            <summary>
            The snippets for this file have been mapped into concrete <see cref="T:Microsoft.VisualStudio.Copilot.Internal.TextEdit" />s.
            </summary>
            <remarks>
            Other states which are dependent on a mapping existing are derived from this one, such as <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> and <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />.
            If a new file was created instead of mapping to an existing file, <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.IsNewFile" /> will be true.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.#ctor(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit})">
            <summary>
            When <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping" /> has completed, the resulting edits are <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.Edits">stored in this state</see>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.#ctor(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit})">
            <summary>
            Transition directly from pending state, for cases where we have the edits for <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.MappedSnapshot">the target document's current state</see> cached and can bypass <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping" />. This also applies to new file scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.#ctor(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped)">
            <summary>
            Copy constructor for states based on this one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.Edits">
            <summary>
            The edits resulting from mapping snippets into <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.MappedSnapshot">a document</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.EditLocationMap">
            <summary>
            A dictionary allowing lookup of edits by the <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> at <see cref="P:Microsoft.VisualStudio.Text.Span.Start">the beginning of</see> their <see cref="P:Microsoft.VisualStudio.Copilot.Internal.TextEdit.Span" />.
            </summary>
            <remarks>
            Used in the <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> state for <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.ReviewDecisions">tracking which edits have been accepted and rejected</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.IsNewFile">
            <summary>
            Whether this edit was completed by creating a new file instead of mapping into an existing one.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> edits are being reviewed by the user, who can <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.AcceptEditsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Threading.CancellationToken)">accept</see> or <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.RejectEditsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Threading.CancellationToken)">reject</see> them individually.
            Before an edit is <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Accepted">accepted</see> or <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Rejected">rejected</see>,
            it is considered <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Undecided">undecided</see>.
            </summary>
            <remarks>
            As the user reviews the edits, this state will be replaced by a new <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> with updated counts.
            If there are 0 <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">undecided edits</see>, then the state should be replaced by <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" /> which represents a finalized form of this.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.#ctor(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit})">
            <summary>
            Transitions from a previous <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> state, updating with new <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Accepted">accepts</see> and <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Rejected">rejects</see>.
            </summary>
            <param name="prev">The previous reviewing state.</param>
            <param name="newAccepts">Newly accepted edits since <paramref name="prev" />.</param>
            <param name="newRejects">Newly rejected edits since <paramref name="prev" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.#ctor(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing)">
            <summary>
            Updates the reviewing state's counts based on the current state of its <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.ReviewDecisions" />.
            </summary>
            <param name="prev">Previous reviewing state, including its internally mutable <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.ReviewDecisions" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.#ctor(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped,Microsoft.VisualStudio.Copilot.EditingStateTracking.ReviewId)">
            <summary>
            Enters a new review for a set of <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> edits.
            </summary>
            <param name="prev">The mapped edits to review.</param>
            <param name="reviewId">A unique ID for the review.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.ReviewDecisions">
            <summary>
            Gets a dictionary recording user decisions about mapped edits. Edits are differentiated by the <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> at <see cref="P:Microsoft.VisualStudio.Text.Span.Start">the beginning of</see> their <see cref="P:Microsoft.VisualStudio.Copilot.Internal.TextEdit.Span" />. The corresponding edit can be obtained from <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped.EditLocationMap" />.
            </summary>
            <remarks>
            This is backed by a mutable dictionary which is passed by reference to future states without copying, so it may not match the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.AcceptedCount" />/<see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.RejectedCount" />/<see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount" /> properties.
            Prefer to use those properties instead of inspecting this dictionary where possible.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">
            <summary>
            The number of edits which the user has <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Undecided">not made a decision about</see>.
            </summary>
            <remarks>
            If no decision has been made, these edits will be converted to one of the other states when advancing to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, depending on whether <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)" /> or <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)" /> is called.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.AcceptedCount">
            <summary>
            The number of edits which the user has <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Accepted">accepted</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.RejectedCount">
            <summary>
            The number of edits which the user has <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Rejected">rejected</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.ReviewId">
            <summary>
            Unique identifier for each started review instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Reactivated">
            <summary>
            Whether this review state is a reactivation of a <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.InactiveReview" />.
            </summary>
            <remarks>Only set in the immediate activation state; any subsequent updates will clear this flag.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice">
            <summary>
            Represents a decision that may have been made about an edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Accepted">
            <summary>
            The edit has been accepted and applied to the document.
            </summary>
            <remarks>Once being accepted, an edit can no longer be rejected.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Rejected">
            <summary>
            The edit has been rejected and will not be applied to the document.
            </summary>
            <remarks>Once being rejected, an edit can no longer be accepted.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Undecided">
            <summary>
            No decision has been made about this edit. It may change to be either <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Accepted" /> or <see cref="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice.Rejected" />.
            </summary>
            <remarks>
            If no decision has been made, these edits will be converted to one of the other states when advancing to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, depending on whether <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)" /> or <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)" /> is called.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.InactiveReview">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> is paused. There may have been edits that were accepted, rejected, but there are still remaining undecided edits.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed">
            <summary>
            The associated edits have been either accepted or rejected and will not change, unless the iteration is reset or undone (e.g. by the snapshot service).
            </summary>
            <exception cref="T:System.InvalidOperationException">It is not valid to transition directly from one completed state to another.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.Choice">
            <summary>
            Gets the choice for remaining edits. Can be null if transitioning from a state that is not <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)">
            <summary>
            Advance from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, accepting all edits which were not yet accepted or rejected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)">
            <summary>
            Advance from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, rejecting all edits which were not yet accepted or rejected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)">
            <summary>
            Advance from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, accepting all edits.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)">
            <summary>
            Advance from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, rejecting all edits.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.FinalizeCompleteReview(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)">
            <summary>
            Advances from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" /> if the review is complete. If there are any <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">undecided edits</see>, throws an <see cref="T:System.InvalidOperationException" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the review is not actually complete.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptUnmappedNewFile(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason)">
            <summary>
            Special case for completing a <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped" /> state. This happens when a new file is created instead of editing an existing file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AssignUndecided(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing,Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.Choice)">
            <summary>
            Helper method to assign edits which have not been accepted or rejected.
            If <paramref name="undecidedAssignment" /> is also undecided, an exception will be thrown if there are any undecided.
            </summary>
            <param name="reviewing">The review which has edits to assign.</param>
            <param name="undecidedAssignment">The choice that should be made about undecided edits. If this is also undecided, an exception will be thrown if there are any undecided.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptedEdits">
            <summary>
            The list of mapped edits which have been accepted into the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectedEdits">
            <summary>
            The list of mapped edits which were not accepted into the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptedCount">
            <summary>
            The count of <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.AcceptedEdits" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectedCount">
            <summary>
            The count of <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.RejectedEdits" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.Reason">
            <summary>
            The reason why the editing state changed to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed.PreviousState">
            <summary>
            The editing state immediately before completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.FaultedDuringMapping">
            <summary>
            An edit which failed during mapping.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason">
            <summary>
            Reason a file entered the <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" /> state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason.EditsReviewedIndividually">
            <summary>
            The edits in the file were individually reviewed until they were all either accepted or rejected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason.FileAccepted">
            <summary>
            All remaining changes in the file were accepted together.
            </summary>
            <remarks>This may not include all proposed changes if the user reviewed and rejected any of them.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason.AllFilesAccepted">
            <summary>
            All remaining changes in all files in the same iteration were accepted together.
            </summary>
            <remarks>This may not include all proposed changes if the user reviewed and rejected any of them.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason.IterationChange">
            <summary>
            An iteration was added or removed, causing all remaining unaccepted edits to be rejected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.ReviewId">
            <summary>
            A guid which correlates <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> state related to a user-initiated file review.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.ReviewId.#ctor(System.Guid)">
            <summary>
            A guid which correlates <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> state related to a user-initiated file review.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.FileEditingStateService.GenerateTraceDifferentiator(Microsoft.VisualStudio.Copilot.EditingStateTracking.FileEditingStateService.FileSnippetsKey)">
            <summary>
            Generate differentiators used for trace logs.
            </summary>
            <returns>A string for differentiating the file editing state in trace logs</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.FileEditingStateService.FileEditingState">
            <summary>
            A collection of snippets that can be mapped to a document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.FileEditingStateService.FileSnippetsKey">
            <summary>
            Key identifing a unique combination of a file and a message's snippets to apply to that file.
            </summary>
            <remarks>Is not linked to the contents of that file, just the association between the file and a message's snippets.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.ICopilotFileEditingStateService">
            <summary>
            Service containing ephemeral <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState">editing state</see> relating to the Edits feature for each unique combination of (from least to most specific):
            <list type="bullet">
            <item>Response (identified by <see cref="T:Microsoft.VisualStudio.Copilot.CopilotMessageId" /> within a <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSessionId" /></item>
            <item>Target file (such as that specified by <see cref="P:Microsoft.VisualStudio.Copilot.CopilotFileSnippets.Path" />)</item>
            <item>Set of edits targeted to that file within that response (such as <see cref="P:Microsoft.VisualStudio.Copilot.CopilotFileSnippets.Snippets" />)</item>
            </list>
            </summary>
            <remarks>
            Also see <seealso cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState">
            <summary>
            Ephemeral state <seealso cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.ICopilotFileEditingStateService">belonging to both a specific file and response</seealso>'s unmapped edits. Responsibilities include:
            <list type="bullet">
            <item><see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">Exposing</see> a <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState" /> which transitions through different forms, allowing <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.ObservableEditingState">updates to be subscribed to</see>.</item>
            <item>Running <see cref="T:Microsoft.VisualStudio.Copilot.Internal.ILanguageCodeMapper">code mapping</see> for its edits associated with it, and retaining the resulting <see cref="T:Microsoft.VisualStudio.Copilot.Internal.TextEdit" />s which are anchored to a specific <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot">point in time in the document</see>.</item>
            <item>Advancing its <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState" /> when notified about specific actions such as <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.AcceptAllAsync(Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason,System.Threading.CancellationToken)" /></item>
            <item>Updating the response in history with whether any changes were accepted. (not <b>currently implemented</b>, see PR 597099)</item>
            </list>
            Currently it is <b>not</b> responsible for these operations, which are handled by an implementation of ICopilotFileListCommandProvider:
            <list type="bullet">
            <item>Invoking ICopilotSnapshotService to capture the current state of documents.</item>
            <item>Applying changes to documents.</item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">
            <summary>
            The current state of this file's editing operation. Updates as the workflow shifts between different <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState" />s.
            </summary>
            <remarks>To react to those updates as they happen, use <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.ObservableEditingState" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.ObservableEditingState">
            <summary>
            Observable form of <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState" />. Updates as the workflow shifts between different <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState" />s.
            </summary>
            <remarks>To obtain the current state, use <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.AcceptEditsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Threading.CancellationToken)">
            <summary>
            Updates state to reflect that the user has accepted some edits.
            <list type="bullet">
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />, it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /></item>
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />, and there are <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">no more undecided edits</see> after accepting, it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />.</item>
            </list>
            </summary>
            <remarks>Throws an <see cref="T:System.InvalidOperationException" /> under the following conditions:
            <list type="bullet">
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is not <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> or <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> (requires the edits to be mapped)</item>
            <item>If the <paramref name="edits">provided edits</paramref> do not belong to the current mapping.</item>
            </list>
            </remarks>
            <param name="edits"><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped">Mapped</see> edits to accept.</param>
            <param name="cancellation">Cancellation for the operation.</param>
            <exception cref="T:System.InvalidOperationException">Throws if accepting is not allowed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.RejectEditsAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Threading.CancellationToken)">
            <summary>
            Updates state to reflect that the user has rejected some edits.
            <list type="bullet">
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />, it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /></item>
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />, and there are <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">no more undecided edits</see> after rejecting, it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />.</item>
            </list>
            </summary>
            <remarks>Throws an <see cref="T:System.InvalidOperationException" /> under the following conditions:
            <list type="bullet">
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is not <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> or <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> (requires the edits to be mapped)</item>
            <item>If the <paramref name="edits">provided edits</paramref> do not belong to the current mapping.</item>
            </list>
            </remarks>
            <param name="edits"><see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped">Mapped</see> edits to reject.</param>
            <param name="cancellation">Cancellation for the operation.</param>
            <exception cref="T:System.InvalidOperationException">Throws if rejecting is not allowed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.AcceptAllAsync(Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason,System.Threading.CancellationToken)">
            <summary>
            Accepts all mapped edits which have not been rejected.
            <list type="bullet">
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />, it will advance directly to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" /> and all the mapped edits will be accepted.</item>
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />, all <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">undecided edits</see> will be accepted, and it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />.</item>
            </list>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.AcceptNewFileAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason,System.Threading.CancellationToken)">
            <summary>
            Accepts edits which create a new file instead of mapping to an existing one. Generally used to jump from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped" /> directly to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />, but also supports <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" /> if this new file has been mapped before. Other state transitions will throw an <see cref="T:System.InvalidOperationException" />.
            </summary>
            <param name="edits">The edits.</param>
            <param name="reason">The reason the edits were accepted.</param>
            <param name="cancellation">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">If in some other state, implying that the change could be mapped into an existing file.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.RejectAnyUnacceptedEditsAsync(Microsoft.VisualStudio.Copilot.EditingStateTracking.CompletionReason,System.Threading.CancellationToken)">
            <summary>
            Accepts any mapped edits which have not been accepted yet.
            <list type="bullet">
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />, it will advance directly to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" /> and all of the mapped edits will be rejected.</item>
            <item>If the <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.CurrentEditingState">current state</see> is <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />, all <see cref="P:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing.UndecidedCount">undecided edits</see> will be rejected, and it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Completed" />.</item>
            </list>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.ResetAsync(System.Threading.CancellationToken)">
            <summary>
            Changes the state back to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped" /> unconditionally.
            </summary>
            <remarks>
            If a previously mapping is still valid, another call to <see cref="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.MapAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Action{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Int32},System.Threading.CancellationToken)" /> will result in a direct transition to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.MapAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Action{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Int32},System.Threading.CancellationToken)">
            <summary>
            Map this edit to the current state of the target document.
            See also <see cref="M:Microsoft.VisualStudio.Copilot.CodeMappers.ICodeMappingManager.MapAsync(Microsoft.VisualStudio.Copilot.Internal.MappingTarget,System.Collections.Generic.IReadOnlyList{System.String},System.String,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Action{System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Int32,System.Double},System.Threading.CancellationToken)">ICodeMappingManager.MapAsync()</see>, which is called using the snippets that were used to construct this <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState" />.
            <list type="bullet">
            <item>Usually this should be invoked while in <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.NotMapped" />.</item>
            <item>If there is already an existing applicable mapping that can be reused, it will transition directly to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />.</item>
            <item>Otherwise it will advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapping" />, which will later advance to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> or <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.FaultedDuringMapping" />.</item>
            </list>
            May throw an <see cref="T:System.InvalidOperationException" /> if not in a valid state for mapping.
            </summary>
            <param name="target">The mapping target.</param>
            <param name="correlationId"><see cref="T:Microsoft.VisualStudio.Copilot.CopilotCorrelationId" /> A correlation id to correlate telemetry from the mapper with telemetry from the client.</param>
            <param name="onEditsUpdated">Callback invoked as the list of edits is being streamed; invoked with the current full set of edits. This callback will also be invoked with an empty list of edits when the mapping process starts.</param>
            <param name="cancellation">A cancellation token.</param>
            <returns>Full set of text edits that can be applied to the provided <see cref="T:Microsoft.VisualStudio.Copilot.Internal.MappingTarget" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.MapNewFileAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.Internal.TextEdit},System.Threading.CancellationToken)">
            <summary>
            Map edit to this new file. The state advances to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />.
            </summary>
            <param name="edits">The edits.</param>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.ReviewMappedFileAsync(Microsoft.VisualStudio.Copilot.EditingStateTracking.ReviewId,System.Threading.CancellationToken)">
            <summary>
            Transitions state to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />. This may transition from an <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.InactiveReview" /> or <seealso cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" /> state.
            </summary>
            <param name="reviewId">Unique id for the review.</param>
            <param name="cancellation">A cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">If the current state is not <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Mapped" />, implying that this should not transition to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" />.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.DismissRequested">
            <summary>
            Occurs when a dismissal of the visual components in the editor is requested.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.RequestDismissal">
            <summary>
            Requests the dismissal of the visual components in the editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.IFileEditingState.SuspendReviewWithPendingEditsAsync(System.Threading.CancellationToken)">
            <summary>
            Transitions from <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> back to <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.InactiveReview" /> to pause the <see cref="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState.Reviewing" /> state, keeping the same tracked edits.
            </summary>
            <param name="cancellation">A cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.EditingStateTracking.MappedEditCache">
            <summary>
            Cache for mapped edits. This cache should be created once per file and snippets combination.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.EditingStateTracking.StateChangeTelemetryObserver.BuildPropertyBag(Microsoft.VisualStudio.Copilot.EditingStateTracking.EditingState)">
            <summary>
            Builds a property bag for the provided event, including common properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ExtensionMethods.AtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Check whether the enumerable has at most <paramref name="count" /> elements.
            </summary>
            <typeparam name="TElement">The type of element in the enumerable.</typeparam>
            <param name="self">The enumerable to check.</param>
            <param name="count">How many elements the enumerable should have or less.</param>
            <returns><see langword="true" /> if <paramref name="self" /> has <paramref name="count" /> or less elements, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ExtensionMethods.AsElementType(Microsoft.VisualStudio.Copilot.CopilotTypeName)">
            <summary>
            Gets the type name of the underlying element type for an array or the same type name.
            </summary>
            <returns>A type name representing the type name without array status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotCommand">
            <summary>
            A command that can be executed on the response, manually or automatically.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ICopilotCommand.Title">
            <summary>
            Gets the title for the command UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ICopilotCommand.CanonicalName">
            <summary>
            Gets the non-localized command name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotEnvironment">
            <summary>
            Represents the environment of the <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSessionProvider" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotEnvironment.OpenOutputPaneAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the Conversations output pane.
            </summary>
            <param name="cancellation">The cancellation token.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotRequestOrchestrator">
            <summary>
            The request orchestrator takes in a request from a <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotSession" /> and determines how to distribute it to any responders and how to compute the final response(s).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICopilotSessionProvider">
            <summary>
            Represents the top level provider for an interactive model.
            </summary>
            <remarks>
            The VS user interface won't support multiple providers, so if more than one export is found,
            it will use the first one. If no provider is found, the user interface will be disabled.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ICopilotSessionProvider.IsEnabled">
            <summary>
            Indicates whether the provider is enabled and can create sessions.
            </summary>
            <remarks>
            If the provider is not enabled, VS will disable related commands.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ICopilotSessionProvider.Environment">
            <summary>
            Gets the environment fo the  provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ICopilotSessionProvider.CreateSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new copilot session.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.IDEContext.MiscellaneousContextProvider">
            <summary>
            A context provider for miscellaneous plain-text context that is not covered by other context providers.
            You should only use this context type as a last resort, since these contexts cannot be reduced.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IDEContext.SymbolExtensions.ToSymbolKind(Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind)">
            <summary>
            Convert supported SymbolKinds
            </summary>
            <param name="kind">Backed type</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.IFileViewProvider">
            <summary>
            Helper interface that will provide utilities to handle transition from file paths into
            WPF Text views on visual studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IFileViewProvider.CreateTransientFileForRefinement(System.String,System.String,System.Guid)">
            <summary>
            Provides a WPF transient file view that should allow the user to save it to disk and on a selected folder.
            </summary>
            <param name="filePath">The intended target path for the transient file.</param>
            <param name="language">The language the file will be written in.</param>
            <param name="transientFileId">An id to identify the transient file on telemetry..</param>
            <returns>The WPF text view for the file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IFileViewProvider.GetExistingFileForRefinement(System.String)">
            <summary>
            Opens an existing file for refinement in the editor.
            If the file doesn't exist it will return null.
            </summary>
            <param name="filePath">The path of the file to open</param>
            <returns>The editor's view of the opened file, or null when the file couldn't be found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IFileViewProvider.OpenExistingOrCreateFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an IWpfTextView for the specified file path.
            If the file path doesn't exist, it will create a new file at the given path and return an empty snapshot linked to that file.
            </summary>
            <param name="filePath">The path of the file for which to retrieve the snapshot.</param>
            <param name="cancellation">A cancellation token that can be used to cancel the operation.</param>
            <returns>The text IwpfTextView of the specified file.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IFileViewProvider.TryCreateFileAtPath(System.String,System.String)">
            <summary>
            Tries to create a file at the specified path with the given content and options.
            If a project is found close to the path of creation, the file will be added to the project.
            </summary>
            <param name="filePath">The path where the file should be created.</param>
            <param name="content">The content of the file.</param>
            <returns><c>true</c> if the file was successfully created, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.IGlobalTypeProvider">
            <summary>
            An interface exported via MEF that indicates the aggregating type provider for the host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.IIdeFilesProvider.IsSolutionOpened">
            <summary>
            <see langword="true" /> if the user has a file, folder, or solution open; otherwise, <see langword="false" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IInternalBugUrlBuilder.Build">
            <summary>
            Builds a url that when opened, will show a partially filled out bug template,
            containing details like the current extension version, session, VS version,
            as well as the absolute path to this session's log file so that it can be
            attached easily.
            </summary>
            <returns>A url if the user is internal, otherwise null.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Copilot.IInternalCopilotInteractionService.RegistrationsChanged">
            <summary>
            Raised when the scope or context provider registrations have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Indentation">
            <summary>
            Provides a set of static methods for adjusting the indentation of code strings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Indentation.AdjustIndentation(System.String,System.Int32)">
            <summary>
            Adjusts the indentation of the given code string to match the specified target indentation string.
            This allows us to Add or Remove indentation characters to adapt the suggested code to be part of the target code.
            </summary>
            <param name="code">The code string to adjust.</param>
            <param name="targetBaseIndentation">The target indentation string to match.</param>
            <returns>The adjusted code string.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.InputSymbols.punctuation">
            <summary>
            These symbols are treated as punctuation so they will be escaped and end the parsing of a reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.InteractionExtensions.GetAgentMentions(Microsoft.VisualStudio.Copilot.CopilotRequest)">
            <summary>
            Gets the names of agents mentioned in the agent syntax (@agent), trimmed and lower string.
            </summary>
            <param name="self">The request to inspect for mentions.</param>
            <returns>The trimmed/lowered name (first input) of any agent mention.</returns>
            <remarks>
            These are only the names present in mentions which means they do not necessarily resolve to a real agent.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.InternalThreadOptions.CreationParameters">
            <summary>
            Gets the creation parameters for the thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.InternalThreadOptions.ShowOnCreation">
            <summary>
            Gets a value indicating whether the thread should be shown to the user when it is created. Defaults to true.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ISemanticContextProvider">
            <summary>
            Interface for interacting with the semantic context brokered service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetSemanticContextAsync(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.DocumentSelection},System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves relevant skeleton code context for a document.
            </summary>
            <param name="filePath">File path of the document.</param>
            <param name="content">Contents of the file.</param>
            <param name="selections">Any active selections in the document.</param>
            <param name="query">The user's query, for consideration as part of the ranking.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Skeleton code ranges.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.ReduceContentAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)">
            <summary>
            Reduces a collection of skeleton code ranges based off a given token limit.
            </summary>
            <param name="ranges">Skeleton code ranges</param>
            <param name="copilotReductionOptions">Reduction options to reduce semantic context</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Reduced skeleton code range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.PromptifyAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolRange},System.Threading.CancellationToken)">
            <summary>
            Promptifies the skeleton code range into a string.
            </summary>
            <param name="symbols">Skeleton code ranges.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Reduced skeleton code range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetSymbolCompletionItemsAsync(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of symbol completion items based on the provided search text.
            </summary>
            <param name="symbolSearchText">The text to search for symbols.</param>
            <param name="filesFilter">An optional collection of file paths to filter the search results.</param>
            <param name="symbolKindsFilter">An optional collection of symbol kinds to filter the search results.</param>
            <param name="maxCount">The maximum number of results to return.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a read-only list of <see cref="T:Conversations.Service.Contracts.SymbolContext.SymbolCompletionItem" />s.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetSymbolContextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the context for the symbol matching the fully qualified name.
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the symbol.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.CopilotSymbolContextSnippet" /> of the symbol if it is found in the index, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetReducedSymbolContextAsync(System.String,Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets a reduced context of the symbol based on the provided reduction options.
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the symbol.</param>
            <param name="reductionOptions">Reduction options to reduce the symbol context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Reduced <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.CopilotSymbolContextSnippet" /> of the symbol if it is found in the index and can be reduced, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetContextLocationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the location of the symbol.
            </summary>
            <param name="fullyQualifiedName">The fully qualified name.</param>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>The context location.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetDefinitionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get symbol range for a fully qualified name.
            </summary>
            <param name="fullyQualifiedName">Fully qualified name.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A list of possible ranges for the fully qualified name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.GetSymbolDefinitionSnippetsByUnqualifiedNamesAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get code snippets of the symbol definitions that match the provided unqualified names.
            </summary>
            <remarks>
            The symbol search is case-insensitive. The full definitions for the symbols are returned, except for classes and interfaces (to strip member comments)
            in which case a skeletonized version of the definition is returned.
            </remarks>
            <param name="unqualifiedNames">A list of unqualified symbol names to retrieve symbol context for.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A list of <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.CopilotSymbolContextSnippet" />s containing the code snippets for the provided unqualified symbol names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISemanticContextProvider.SearchChunkIndexAsync(Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Searches the chunk index for a query.
            </summary>
            <param name="query">Query to search within that index.</param>
            <param name="cancellationToken">Cancellation for the search operation.</param>
            <returns>Ordered search results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISymbolProvider.GetSymbolContextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the context for the symbol matching the fully qualified name.
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the symbol.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContext" /> of the symbol if it is found in the index and its <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.SymbolKind" /> is supported, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISymbolProvider.GetReducedSymbolContextAsync(System.String,Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets a reduced context of the symbol based on the provided reduction options.
            </summary>
            <param name="fullyQualifiedName">Fully qualified name of the symbol.</param>
            <param name="reductionOptions">Reduction options to reduce the symbol context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Reduced <see cref="T:Microsoft.VisualStudio.Copilot.CopilotSymbolContext" /> of the symbol if it is found in the index and can be reduced, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISymbolProvider.GetContextLocationAsync(System.String,System.Nullable{Microsoft.VisualStudio.Copilot.CopilotSymbolContextType},System.Threading.CancellationToken)">
            <summary>
            Get the location of the symbol by fully qualified name.
            </summary>
            <param name="fullyQualifiedName">The fully qualified name.</param>
            <param name="kind">The kind of the symbol.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ISymbolProvider.SymbolResult">
            <summary>
            Represents a symbol result.
            </summary>
            <param name="Name">The name of the symbol.</param>
            <param name="Kind">The kind of the symbol.</param>
            <param name="FullyQualifiedName">The identification of the symbol.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISymbolProvider.SymbolResult.#ctor(System.String,Microsoft.VisualStudio.Copilot.CopilotSymbolContextType,System.String)">
            <summary>
            Represents a symbol result.
            </summary>
            <param name="Name">The name of the symbol.</param>
            <param name="Kind">The kind of the symbol.</param>
            <param name="FullyQualifiedName">The identification of the symbol.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ISymbolProvider.SymbolResult.Name">
            <summary>The name of the symbol.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ISymbolProvider.SymbolResult.Kind">
            <summary>The kind of the symbol.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ISymbolProvider.SymbolResult.FullyQualifiedName">
            <summary>The identification of the symbol.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ISymbolProvider.ContextLocation">
            <summary>
            A location in a file.
            </summary>
            <param name="FileName">The filename.</param>
            <param name="Start">The start position.</param>
            <param name="Length">The length.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ISymbolProvider.ContextLocation.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            A location in a file.
            </summary>
            <param name="FileName">The filename.</param>
            <param name="Start">The start position.</param>
            <param name="Length">The length.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ISymbolProvider.ContextLocation.FileName">
            <summary>The filename.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ISymbolProvider.ContextLocation.Start">
            <summary>The start position.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.ISymbolProvider.ContextLocation.Length">
            <summary>The length.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ITextFormattingService.FormatString(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.String)">
            <summary>
            Format <paramref name="insertionText" /> as if it was going to be inserted at <paramref name="point" />.
            </summary>
            <returns>The correctly formatted (accounting for virtual space, tabs vs. spaces, and line breaks) text.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.MarshaledProxyHandler`2">
            <summary>
            Manages the lifetime of long-lived marshaled objects from a brokered service.
            </summary>
            <typeparam name="TService">The brokered service contract.</typeparam>
            <typeparam name="TMarshaled">The marshaled object contract.</typeparam>
            <remarks>
            <typeparamref name="TMarshaled" /> is automatically re-retrieved when the proxy dies.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.MarshaledProxyHandler`2.#ctor(Microsoft.ServiceHub.Framework.ServiceBrokerClient,System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Copilot.MarshaledProxyHandler`2" /> class.
            </summary>
            <param name="client">A shared client, ownership is not transferred.</param>
            <param name="retriever">The function to retrieve the marshaled object from the brokered service.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.MarshaledProxyHandler`2.GetProxyAsync(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)">
            <summary>
            Gets the marshaled proxy from the service, re-creating if necessary.
            </summary>
            <param name="serviceDescriptor">The descriptor for the brokered <typeparamref name="TService" />.</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>The marshaled proxy.</returns>
            <remarks>
            If the <typeparamref name="TService" /> has become unavailable or there is an error in the retriever,
            the exception will be propagated.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ProjectCapabilities">
            <summary>
            Collection of project capability constants for VS hierarchies
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ServiceBrokerRetryExtensions.DefaultServiceAvailabilityWaitTimes">
            <summary>
            Default timeouts for GetServiceProxyWithRetriesAsync if not specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ServiceBrokerRetryExtensions.DefaultWaitBetweenAttemptsOnException">
            <summary>
            Default wait between attempts that threw an exception for GetServiceProxyWithRetriesAsync if not specified.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.ServiceBrokerRetryExtensions.GetServiceProxyWithRetriesAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken,System.Nullable{Microsoft.ServiceHub.Framework.ServiceActivationOptions},System.Int32,System.Collections.Generic.IReadOnlyList{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation},System.Action{System.String,System.Boolean})">
            <summary>
            Obtain a proxy from the service broker with retries and waiting for the service proxy to become available. The caller is responsible for appropriately handling the lifetime of the returned proxy.
            This should mainly be used in locations where obtaining a service's proxy is critical to functionality over the lifetime of the extension, and impacts more than a single operation.
            Avoid needing this if possible. It sends one telemetry scope per retry, which will be a lot of noise if called frequently.
            </summary>
            <param name="serviceBroker">Service broker to use.</param>
            <param name="descriptor">Descriptor of the service to get a proxy for.</param>
            <param name="cancellationToken">Cancellation for the entire operation.</param>
            <param name="serviceActivationOptions">Options to use when activating the service.</param>
            <param name="maxNumAttempts">How many attempts to make if an exception is thrown or delayed activation times out.</param>
            <param name="serviceAvailabilityWaitTimes">How long to wait on each attempt for the service to become available.</param>
            <param name="waitBetweenAttemptsOnException">How long to wait between attempts if an exception is thrown.</param>
            <param name="correlation">Parent telemetry event to correlate with.</param>
            <param name="logCallback">Callback for logging messages. If the boolean is true, the message is for an error. Otherwise it is verbose.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if a proxy could not be obtained.</exception>
            <returns>The requested service proxy.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.TestRunnerHelpers.ScopeRunsInConsoleRunner">
            <summary>
            A contract name to use on an export on an already MEF-exported scope brokered service to indicate that it should be auto-loaded into the console test runner.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.TestRunnerHelpers.ContextProviderRunsInConsoleRunner">
            <summary>
            A contract name to use on an export on an already MEF-exported context provider brokered service to indicate that it should be auto-loaded into the console test runner.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.TestRunnerHelpers.AgentProviderRunsInConsoleRunner">
            <summary>
            A contract name to use on an export on an already MEF-exported agent provider brokered service to indicate that it should be auto-loaded into the console test runner.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.TestRunnerHelpers.TraitProviderRunsInConsoleRunner">
            <summary>
            A contract name to use on an export on an already MEF-exported trait provider brokered service to indicate that it should be auto-loaded into the console test runner.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.TestRunnerHelpers.ContextTypeMetadata">
            <summary>
            A contract name to use on an export on an already MEF-exported type provider brokered service to indicate the context types the trait provider should be subscribed to.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Tracing.ICopilotExtensionTraceSource">
            <summary>
            A TraceSource that may be exported by a core extension implementation.
            Today, this is exported by the VS Copilot chat extension and is
            used for writing trace messages to an output window pane and log file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Tracing.TraceSourceExtensions">
            <summary>
            Convenience methods for TraceSource.TraceEvent().
            </summary>
            <remarks>
            Methods that take format arguments or (dollar-prefixed) interpolated strings
            delay the formatting of arguments until the trace event is actually consumed
            by a trace listener (assuming it's not ignored by a trace filter).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Tracing.TraceSourceExtensions.WithName(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Creates a new TraceSource with listeners and switch copied from the
            existing TraceSource.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Tracing.TraceSourceExtensions.ListensFor(System.Diagnostics.TraceSource,System.Diagnostics.TraceEventType)">
            <summary>
            Returns true if there is at least one listener that will consume this
            trace event type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.Tracing.TraceSourceExtensions.TimeStamp(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Writes out the current time, down to ms, to the Verbose channel. Not intended for code that is actually checked in.
            Its primary use is to give an easy way track down performance issues in retail builds prior to checking in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.Tracing.TraceSourceExtensions.NonFormattableString">
             <summary>
             Work around an overload resolution problem with `FormattableString`, enabling
             interpolated string to be used with tracing efficiently while also supporting
             plain strings.
             </summary>
             <remarks>
             See <a href="https://stackoverflow.com/questions/35770713/overloaded-string-methods-with-string-interpolation">
             Overloaded string methods with string interpolation</a>.
            
             An extra implicit conversion causes the compiler to prefer the overloads that take
             `FormattableString` when interpolated strings are used with the tracing methods. While
             plain `string` parameters get converted to/from this struct, the conversions should
             basically evaporate in inlining.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ProjectTypes">
            <summary>
            Defines the various project types.
            When promptified the enum value is converted to a string with underscores replaced with spaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.Aspire">
            <summary>
            Aspire project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.Web_Application">
            <summary>
            Web Application project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.NetMaui">
            <summary>
            .NET MAUI project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.Unreal_Engine">
            <summary>
            Unreal Engine project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.Blazor">
            <summary>
            Blazor project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.WebAssembly">
            <summary>
            WebAssembly project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.WPF">
            <summary>
            WPF project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.Windows_Forms">
            <summary>
            WinForms project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.JavaScript_or_TypeScript">
            <summary>
            JavaScript or TypeScript project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.AspNet_Core">
            <summary>
            ASP.NET Core project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.AspNet_Core_Web_App_Razor_Pages">
            <summary>
            ASP.NET Core Web Razor Pages project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.Azure_Functions">
            <summary>
            Azure Functions project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Copilot.ProjectTypes.DotNet_Worker">
            <summary>
            .NET Worker project type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState">
            <summary>
            Represents the framework state of a C# project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasBlazor">
            <summary>
            Gets a value indicating whether the project has Blazor support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasAspNetCoreWebRazorPages">
            <summary>
            Gets a value indicating whether the project has ASP.NET Core Web Razor Pages support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasMaui">
            <summary>
            Gets a value indicating whether the project has MAUI support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasWasm">
            <summary>
            Gets a value indicating whether the project has WebAssembly support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasWpf">
            <summary>
            Gets a value indicating whether the project has WPF support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasAspire">
            <summary>
            Gets a value indicating whether the project has Aspire support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasAspNetCore">
            <summary>
            Gets a value indicating whether the project has ASP.NET Core support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasWebApp">
            <summary>
            Gets a value indicating whether the project has Web Application support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasWinForms">
            <summary>
            Gets a value indicating whether the project has WinForms support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasAzureFunctions">
            <summary>
            Gets a value indicating whether the project has Function App support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.HasDotNetWorker">
            <summary>
            Gets a value indicating whether the project has Worker support.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpProjectFrameworkState.BlazorLanguageString">
            <summary>
            Gets the Blazor language version string, if applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpReferencesState.HasFastSystemTextJsonReference">
            <summary>
            Gets a value indicating whether the project has System.Text.Json reference 5.0 or later.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpReferencesState.HasNewtonsoftJsonReference">
            <summary>
            Gets a value indicating whether the project has Newtonsoft.Json reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpReferencesState.HasMudBlazorReference">
            <summary>
            Gets a value indicating whether the project has MudBlazor reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpReferencesState.HasAzureFunctionsWorkerReference">
            <summary>
            Gets a value indicating whether the project has a reference to the Azure Functions Worker SDK.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Copilot.CSharpReferencesState.HasAzureFunctionsWebJobsReference">
            <summary>
            Gets a value indicating whether the project has a reference to the Azure Functions WebJobs SDK.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.ICSharpFrameworksEnvironmentProvider">
            <summary>
            Environment information provider for C# frameworks.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.IReferenceProvider">
            <summary>
            Provides methods to interact with project references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.IReferenceProvider.GetPackageVersion(Microsoft.CodeAnalysis.Project,System.String)">
            <summary>
            Gets the version of the specified package referenced in the project.
            </summary>
            <param name="project">The project to check for the package reference.</param>
            <param name="packageName">The name of the package to check.</param>
            <returns>The version of the package if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Copilot.WorkspaceTraitsScope">
            <summary>
            The fallback trait scope will serve as the injection mechanism
            to append fallback traits when no other context that could provide traits was available.
            </summary>
            <remarks>
            This scope generates a single <see cref="T:Microsoft.VisualStudio.Copilot.CopilotWorkspaceContext" /> item
            and it will then call all the registered <see cref="T:Microsoft.VisualStudio.Copilot.ICopilotTraitProvider" /> that registered with context type <see cref="F:Microsoft.VisualStudio.Copilot.CopilotDefaultTypes.WorkspaceContextName" /> to append the traits
            to this context.
            The prompt rendering layer will then render the traits below the workspace traits header, serving as a section with 'additional context' from the project that the trait
            providers may deem necessary or important for the model.
            This scope cannot be explicitly invoked by the user, as it does not implement the IQueryable interface or it's part of the queryable layer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.IsLineBreak(System.Char)">
            <summary>
            Checks if a character is a line break character.
            </summary>
            <param name="character">The input character.</param>
            <returns>True if the input character is a line break character, else false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetFirstLine(System.String)">
            <summary>
            Gets the text before the first line break.
            </summary>
            <param name="text">The input string.</param>
            <returns>The first line of text.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineFromPosition(System.String,System.Int32)">
            <summary>
            Get the line number from a position in a text.
            </summary>
            <param name="text">The content.</param>
            <param name="position">Position in the text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineAndColumnFromPosition(System.String,System.Int32)">
            <summary>
            Get the line and column number from a position in a text.
            </summary>
            <param name="text">The content.</param>
            <param name="position">Position in the text.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.GetLineBreakText(System.String)">
            <summary>
            Determines the line break character of the input string.
            </summary>
            <param name="text">The input string.</param>
            <returns>The line break character of the input string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.LineBreakLength(System.String,System.Int32)">
            <summary>
            Gets the length of the line break character
            0 : if no line break in the text
            1 : if the line break is one of single line break characters
            2 : if the line break character is \r\n combined
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Copilot.SharedStringExtensions.NormalizeLineBreaks(System.String,Microsoft.VisualStudio.Text.ITextSnapshot,System.String@)">
            <summary>
            Normalizes the line breaks of a given original string by replacing the line break text with the target line break text.
            </summary>
            <param name="original">The original string to be normalized.</param>
            <param name="snapshot">The text snapshot to use for obtaining the target line break text.</param>
            <param name="targetLineBreak">The target line break text to use for normalization.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.IDEContext.FilePathConverter">
            <summary>
            File path converter handles converting between absolute and relative paths.
            This is required in order to send relative paths to the model, and then
            convert them back and compare against the current workspace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.IDEContext.DiagnosticContextProvider.ErrorMember">
            <summary>
            Used for a specific error.
            ex:
                - #error:CS1503:'Argument 1: cannot convert from 'int' to 'string'':'FilePath.cs':10
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a document context given a <paramref name="filePath" />.
            </summary>
            <param name="correlationId">The correlation id for the request.</param>
            <param name="filePath">File path of document context to acquire</param>
            <param name="cancellation">Cancellation token.</param>
            <returns>A context object containing a document with given <paramref name="filePath" /> if there is one, or <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetTemporarySnapshotAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Gets a snapshot if one is already created or generates one without storing.
            </summary>
            <remarks>
            For the purposes of verification, #file needs a list of the available documents with the snapshot
            system will already generate. However, we don't want to call store inside it as it may never get released
            if someone is using the system incorrectly. So we'll lookup a snapshot if it's there (which it should be with proper usage)
            and if not we'll generate one without saving it.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ParseAndValidateInputs(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Parse and validate method for <see cref="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.QueryMentionAsync(Microsoft.VisualStudio.Copilot.CopilotMentionQuery,System.Threading.CancellationToken)" />
            </summary>
            <remarks>This method is called by QueryContextAsync, which is called frequently when the user types in the Copilot Chat prompt window after a context trigger char,
            so we should pay close attention to performance here. In the future, we may want to introduce caching, ideally in the ViewModel
            for the results of all context providers
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetActiveFileQueryContextAsync(System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets queried context objects for the active file and, if no other selection has been passed in, the highlighted selection
            </summary>
            <remarks>This method is called by QueryContextAsync, which is called frequently when the user types in the Copilot Chat prompt window after a context trigger char,
            so we should pay close attention to performance here. In the future, we may want to introduce caching, ideally in the ViewModel
            for the results of all context providers
            parameter skipExclusion: bool - only set to true if the function is called when loading the UI to skip loading the exclusion information for the sake of performance
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.IsDocumentExcludedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the document is excluded by Copilot exclusion from context queries.
            </summary>
            <param name="documentPath">The document path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetOpenFileQueriedContextAsync(System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets queried context objects for all open files
            </summary>
            <remarks>This method is called by QueryContextAsync, which is called frequently when the user types in the Copilot Chat prompt window after a context trigger char,
            so we should pay close attention to performance here. In the future, we may want to introduce caching, ideally in the ViewModel
            for the results of all context providers
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetUniquePaths(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.IdeFile})">
            <summary>
            Gets a mapping between full paths and the shortest, unique name for them
            EX: if we have C:/Folder1/Program.cs and C:/Folder2/Program.cs, the shortest unique paths are Folder1/Program.cs and Folder2/Program.cs respectively
            </summary>
            <remarks>This method is called by QueryContextAsync, which is called frequently when the user types in the Copilot Chat prompt window after a context trigger char,
            so we should pay close attention to performance here. In the future, we may want to introduce caching, ideally in the ViewModel
            for the results of all context providers
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ParseAndValidateInputs(System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue})">
            <summary>
            Parse and validate method for <see cref="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetContextAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Copilot.CopilotValue},System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.GetDocumentContextAsync(Microsoft.VisualStudio.Conversations.UI.ViewFocusState,System.Threading.CancellationToken)">
            <summary>
            Gets a DocumentContext, including the current explicit or implicit selection if it exists.
            </summary>
            <remarks>
            This method will always get the implicit selection if there is one.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.MergeDocumentContexts(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ContextToDocumentContextPair})">
            <summary>
            Provides a way to merge multiple document contexts into a single document context if the content is already present in another document context.
            </summary>
            <param name="documentContextsPairs">Document context pairs containing the associated context and document contexts.</param>
            <returns>A list of <see cref="T:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ContextToDocumentContextPair" /> that do not overlap with each other.</returns>
            <remarks>
            ⚠️ This method is a preliminary implementation of merging document contexts. It takes in document contexts and see if the context is already present
            in the other document contexts. This is suboptimal and can be improved in the future.
            ⚠️ This method does not handle the case of merging Semantic Context.
            Tracked Experience: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2112872
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.CombineDocumentSelections(System.Collections.Generic.List{Microsoft.VisualStudio.Copilot.DocumentSelection})">
            <summary>
            Merges overlapping and contiguous document selections.
            </summary>
            <param name="selections">The list of document selections.</param>
            <returns>A list of merged document selections.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ContextToDocumentContextPair">
            <summary>
            Helper struct to map a context to a document context, which is used within
            <see cref="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)" />
            method.
            </summary>
            <param name="Context">Context.</param>
            <param name="DocumentContext">Associated Document Context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ContextToDocumentContextPair.#ctor(Microsoft.VisualStudio.Copilot.CopilotContext,Microsoft.VisualStudio.Copilot.DocumentContext)">
            <summary>
            Helper struct to map a context to a document context, which is used within
            <see cref="M:Microsoft.VisualStudio.Conversations.IDEContext.DocumentContextProvider.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Copilot.CopilotContext},Microsoft.VisualStudio.Copilot.CopilotReductionOptions,System.Threading.CancellationToken)" />
            method.
            </summary>
            <param name="Context">Context.</param>
            <param name="DocumentContext">Associated Document Context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.IDEContext.ErrorContext">
            <summary>
            A context object containing information on the error when gathering context.
            </summary>
            <seealso cref="P:Microsoft.VisualStudio.Copilot.CopilotInteraction.Context" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.ErrorContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Conversations.IDEContext.ErrorContext" /> class.
            </summary>
            <param name="context">The type of context that could not be gathered.</param>
            <param name="exType">The type of the exception causing the error.</param>
            <param name="exMessage">The message of the exception causing the error.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.IDEContext.ErrorContext.Context">
            <summary>
            Gets the context associated with the error.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.IDEContext.ErrorContext.ErrorMessage">
            <summary>
            Gets the error message associated with the context error.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.IDEContext.ErrorContext.StackTrace">
            <summary>
            Gets the stack trace of the context error if one was provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IdeContextTypesProvider.GetRelativeFilePath(System.String)">
            <summary>
            Gets the filename to be used in context from full file path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider">
            <summary>
            Provides methods and events to interact with the Visual Studio workspace.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.WorkspaceChanged">
            <summary>
            Occurs when the workspace changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.GetProjectFromHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the project associated with the specified Visual Studio hierarchy.
            </summary>
            <param name="vsHierarchy">The Visual Studio hierarchy.</param>
            <returns>The project associated with the specified hierarchy, or <c>null</c> if no project is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.IsCapabilityMatch(Microsoft.CodeAnalysis.ProjectId,System.String)">
            <summary>
            Determines whether the specified project has the specified capability.
            </summary>
            <param name="projectId">The project ID.</param>
            <param name="capability">The capability to check.</param>
            <returns><c>true</c> if the project has the specified capability; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.GetDocumentIdsWithFilePath(System.String)">
            <summary>
            Gets the document IDs associated with the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>An immutable array of document IDs associated with the specified file path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.GetProjectByIdAsync(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Gets the project associated with the specified project ID.
            </summary>
            <param name="id">The project ID.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the project associated with the specified project ID, or <c>null</c> if no project is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.GetProjectsAsync(System.Threading.CancellationToken,System.Func{Microsoft.CodeAnalysis.Project,System.Boolean})">
            <summary>
            Gets the projects in the current solution.
            </summary>
            <param name="cancellation">A cancellation token that can be used to cancel the operation.</param>
            <param name="filter">An optional filter to apply to the projects.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an enumerable of projects in the current solution.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IVsWorkspaceProvider.GetWorkspace">
            <summary>
            Gets the current workspace.
            </summary>
            <returns>The current workspace, or <c>null</c> if no workspace is available.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspaceDataProvider">
            <summary>
            Provides methods for performing queries related to project systems within the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspaceDataProvider.IsInOpenFolderModeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a value indicating whether the solution is in open folder mode.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result is <c>true</c> if solution
            is opened via folder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspaceDataProvider.GetWorkspacePathAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the path of the workspace.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the path of the workspace regardless of
            how the solution is opened (via folder or .sln).
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspaceDataProvider.GetBatchedWorkspaceFilePathsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieves a batched list of the file paths in the workspace.
            </summary>
            <param name="batchSize">The size of each batch.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>An asynchronous enumerable that represents the batches of workspace file paths.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspaceDataProvider.IsFileInWorkspaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a file is present in the workspace regardless of how the solution is opened (via folder or .sln).
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>
            A task representing the asynchronous operation. The task result is <c>true</c> if the file
            is in the workspace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspacePathProvider.WorkspacePath">
            <summary>
            Gets the containing folder of the .sln file, or the folder name of the open folder when
            no solution is loaded but a folder is opened.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.IDEContext.IWorkspacePathProvider.GetAbsoluteFilePath(System.String)">
            <summary>
            Uses the open solution or workspace to get the absolute path of a file given its relative path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Indexing.CSharpCodeChunkSource">
            <summary>
            Chunk source for a C# solution. Used for workspace indexing.
            </summary>
            <see cref="T:Microsoft.VisualStudio.Copilot.UnstableInternalApi.Indexing.ICopilotIndexService" />
        </member>
        <member name="F:Microsoft.VisualStudio.Conversations.Indexing.CSharpCodeChunkSource.IndexIgnoreFileName">
            <summary>
            Name of a file that, if present in a solution, will provide ignore patterns to chunk sources.
            Lines that start with "# " will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.Indexing.LazyDictionary`2">
            <summary>
            Dictionary that creates values on demand using a predefined factory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignature">
            <summary>
            Encapsulates the type signature for a C# type.
            </summary>
            <param name="Content">
            Type signature for a C# type.
            </param>
            <param name="FilePaths">
            The paths for the source or metadata files that contain the definition of this type.
            </param>
            <param name="IsExcluded">
            <see langword="true" /> if one or more file paths in <paramref name="FilePaths" /> have been excluded via Copilot's
            content exclusion rules, <see langword="false" /> otherwise.
            </param>
            <remarks>
            <para>
            Signatures for all contained members are also included within a type's signature but method bodies are not.
            </para>
            <para>
            A type's definition may be split across multiple <paramref name="FilePaths" /> if the type is a
            <see langword="partial" /> type.
            </para>
            <para>
            Note that if <paramref name="IsExcluded" /> is <see langword="true" /> then <paramref name="Content" /> will always
            contain an empty string.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignature.#ctor(System.String,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean)">
            <summary>
            Encapsulates the type signature for a C# type.
            </summary>
            <param name="Content">
            Type signature for a C# type.
            </param>
            <param name="FilePaths">
            The paths for the source or metadata files that contain the definition of this type.
            </param>
            <param name="IsExcluded">
            <see langword="true" /> if one or more file paths in <paramref name="FilePaths" /> have been excluded via Copilot's
            content exclusion rules, <see langword="false" /> otherwise.
            </param>
            <remarks>
            <para>
            Signatures for all contained members are also included within a type's signature but method bodies are not.
            </para>
            <para>
            A type's definition may be split across multiple <paramref name="FilePaths" /> if the type is a
            <see langword="partial" /> type.
            </para>
            <para>
            Note that if <paramref name="IsExcluded" /> is <see langword="true" /> then <paramref name="Content" /> will always
            contain an empty string.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignature.Content">
            <summary>
            Type signature for a C# type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignature.FilePaths">
            <summary>
            The paths for the source or metadata files that contain the definition of this type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignature.IsExcluded">
            <summary>
            <see langword="true" /> if one or more file paths in <paramref name="FilePaths" /> have been excluded via Copilot's
            content exclusion rules, <see langword="false" /> otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureContextProvider">
            <summary>
            A context provider that can retrieve signatures for the types that are referenced within a specified set of spans
            within a document.
            </summary>
            <remarks>
            Signatures for all contained members are also included within a type's signature but method bodies are not.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureContextProvider.GetRelevantTypeSignaturesAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Retrieves the type signatures for the types that are referenced within the specified set of spans within a
            document.
            </summary>
            <remarks>
            <para>
            Signatures for all contained members are also included within a type's signature but method bodies are not.
            </para>
            <para>
            Also returns signatures for related types such as base types and interfaces implemented by the types that are
            directly referenced in the supplied set of spans.
            </para>
            <para>
            The relative order in which the type references are encountered in the specified set of spans is preserved in
            the returned collection of type signatures.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureHelper.GetSignature(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the type signature for the type specified by the supplied <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol" />.
            </summary>
            <remarks>
            Signatures for all contained members are also included within a type's signature but method bodies are not.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureHelper.GetDeclarationFilePathsAsync(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Returns the file path(s) that contains the definition of the type specified by the supplied
            <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol" />.
            </summary>
            <remarks>
            A type's definition may be split across multiple files if the type is a <see langword="partial" /> type.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureHelper.TryGetSurroundingNodeSpanAsync``1(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan" /> of the nearest encompassing <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" /> of type
            <typeparamref name="T" /> of which the supplied <paramref name="span" /> is a part within the supplied
            <paramref name="document" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureHelper.GetRelevantTypesAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Retrieves the <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol" />s for the types that are referenced within the specified set of spans
            within a document.
            </summary>
            <remarks>
            <para>
            Also returns <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol" />s for related types such as base types and interfaces implemented by the
            types that are directly referenced in the supplied set of spans.
            </para>
            <para>
            The relative order in which the type references are encountered in the specified set of spans is preserved in
            the returned collection of <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol" />s.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureReferenceLocations">
            <summary>
            Represents the location of a C# type signature within a file with the start line and the end line to analyze. The lines are 0-based.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.CSharpTypeSignature.CSharpTypeSignatureReferenceLocations.#ctor(System.String,System.Collections.Immutable.ImmutableArray{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Represents the location of a C# type signature within a file with the start line and the end line to analyze. The lines are 0-based.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Functions.SearchFunctionHandler.GetFunctionsAsync(Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.Copilot.FunctionInvoker.InvokeAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotRequest,Microsoft.VisualStudio.Copilot.CopilotResponse,Microsoft.VisualStudio.Copilot.CopilotResponseBuilder,System.Threading.CancellationToken)">
            <summary>
            Invokes the functions in the response based on those listed in the original request.
            </summary>
            <returns><see langword="true" /> if able to auto-continue.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService">
            <summary>
            Service that manages snapshots taken during multi-edit scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.TakeSnapshotAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.String,System.Threading.CancellationToken)">
            <summary>
            Takes a snapshot associated for the given session, request.
            </summary>
            <param name="sessionId">Session id that is associated with the snapshot.</param>
            <param name="correlationId">Correlation id (usually request id) that is associated with snapshots.</param>
            <param name="filePath">File path to take snapshot for (if a file doesn't exist on disk, it will be considered new).</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>
            an ITextDocument instance if operation was successful, null otherwise. A null return could happen
            if snapshot could not be saved or if path could not be created or read.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.ReleaseSnapshotAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
            <summary>
            Releases the snapshot from disk and deletes versions specific to a response (correlation id).
            </summary>
            <param name="sessionId">Session id that is associated with the snapshot.</param>
            <param name="correlationId">Correlation id (usually request id) that is associated with snapshots.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.ReleaseSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            Releases the snapshot from disk for a given session, deleting all versions of files for each response.
            </summary>
            <param name="sessionId">Session id that is associated with the snapshot.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.ResetToIterationAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
             <summary>
             Resets files to their snapshot state. Any new files that were added will be deleted from disk and empty directories will also be removed.
            
             This action will reset to a state that represents end of <paramref name="correlationId" /> and assumes the passed in correlation id will
             remain in chat history and user will make a request following it.
             </summary>
             <param name="sessionId">Session id that is associated with the snapshot.</param>
             <param name="correlationId">Correlation id (usually request id) to reset to.</param>
             <param name="cancellationToken">Cancellation token to monitor.</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.UndoIterationAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,Microsoft.VisualStudio.Copilot.CopilotCorrelationId,System.Threading.CancellationToken)">
             <summary>
             Resets files to their original state for a given correlation id. Any new files that were added will be deleted from disk and empty directories will also be removed.
            
             This action will reset to a state that represents beginning of <paramref name="correlationId" />.
             </summary>
             <param name="sessionId">Session id that is associated with the snapshot.</param>
             <param name="correlationId">Correlation id (usually request id) to undo.</param>
             <param name="cancellationToken">Cancellation token to monitor.</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.ResetSessionAsync(Microsoft.VisualStudio.Copilot.CopilotSessionId,System.Threading.CancellationToken)">
            <summary>
            Resets files to their original state before first request in the session. Any new files that were added will be deleted from disk and empty directories will also be removed.
            </summary>
            <param name="sessionId">Session id that is associated with the snapshot.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.ICopilotSnapshotService.GetDocumentFromPathAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the document from the file path.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.UI.IFocusTracker.ShowScope(Microsoft.VisualStudio.Conversations.UI.ScopeType)">
            <summary>
            Return a disposable hooks. The focus scope will be displayed if there are any undisposed hooks.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.UI.ViewFocusState">
            <summary>
            Represents the state of the current document, including the caret position, explicit selection, and implicit selection.
            </summary>
            <param name="DocumentPath">Path to the current document.</param>
            <param name="ContentType">Type of content.</param>
            <param name="Caret">Caret position in the current document.</param>
            <param name="Selection">Explicitly highlighted selection in the current document. Empty if there is none.</param>
            <param name="Scope">Implicitly highlighted selection in the document. If there is an explicit selection, Scope and Selection are approximately equal.</param>
            <see cref="T:Microsoft.VisualStudio.Conversations.UI.IFocusTracker" />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.UI.ViewFocusState.#ctor(System.String,Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Represents the state of the current document, including the caret position, explicit selection, and implicit selection.
            </summary>
            <param name="DocumentPath">Path to the current document.</param>
            <param name="ContentType">Type of content.</param>
            <param name="Caret">Caret position in the current document.</param>
            <param name="Selection">Explicitly highlighted selection in the current document. Empty if there is none.</param>
            <param name="Scope">Implicitly highlighted selection in the document. If there is an explicit selection, Scope and Selection are approximately equal.</param>
            <see cref="T:Microsoft.VisualStudio.Conversations.UI.IFocusTracker" />
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.UI.ViewFocusState.DocumentPath">
            <summary>Path to the current document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.UI.ViewFocusState.ContentType">
            <summary>Type of content.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.UI.ViewFocusState.Caret">
            <summary>Caret position in the current document.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.UI.ViewFocusState.Selection">
            <summary>Explicitly highlighted selection in the current document. Empty if there is none.</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.UI.ViewFocusState.Scope">
            <summary>Implicitly highlighted selection in the document. If there is an explicit selection, Scope and Selection are approximately equal.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Conversations.LazyTypeProvider">
            <summary>
            A wrapper for ICopilotTypeProviders imported via MEF intended to marshaled across RPC.
            </summary>
            <remarks>
            This wrapper ensures lazy initialization of type providers.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Conversations.LazyTypeProvider.TypeNames">
            <summary>
            Gets the type names supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.LazyTypeProvider.PromptifyAsync(Microsoft.VisualStudio.Copilot.CopilotValue,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Conversations.LazyTypeProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Minimatch.Minimatcher">
            <summary>Parses a single glob pattern and tests strings against it.</summary>
        </member>
        <member name="M:Minimatch.Minimatcher.#ctor(System.String,Options)">
            <summary>Creates a new Minimatcher instance, parsing the pattern into a regex.</summary>
        </member>
        <member name="M:Minimatch.Minimatcher.CreateFilter(System.String,Options)">
            <summary>Creates a filter function that tests input against a pattern.</summary>
        </member>
        <member name="M:Minimatch.Minimatcher.Check(System.String,System.String,Options)">
            <summary>Tests a single input against a pattern.</summary>
            <remarks>This function reparses this input on each invocation.  For performance, avoid this function and reuse a Minimatcher instance instead.</remarks>
        </member>
        <member name="M:Minimatch.Minimatcher.Filter(System.Collections.Generic.IEnumerable{System.String},System.String,Options)">
            <summary>Filters a list of inputs against a single pattern.</summary>
            <remarks>This function reparses this input on each invocation.  For performance, avoid this function and reuse a Minimatcher instance instead.</remarks>
        </member>
        <member name="M:Minimatch.Minimatcher.CreateRegex(System.String,Options)">
            <summary>Compiles a pattern into a single regular expression.</summary>
        </member>
        <member name="M:Minimatch.Minimatcher.IsMatch(System.String)">
            <summary>Checks whether a given string matches this pattern.</summary>
        </member>
        <member name="M:Minimatch.Minimatcher.Filter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Filters a list of inputs against this pattern.</summary>
        </member>
        <member name="M:Minimatch.Minimatcher.BraceExpand(System.String,Options)">
            <summary>Expands all brace ranges in a pattern, returning a sequence containing every possible combination.</summary>
        </member>
        <member name="T:Options">
            <summary>Contains options that control how Minimatch matches strings.</summary>
        </member>
        <member name="P:Options.NoComment">
            <summary>Suppresses the behavior of treating # at the start of a pattern as a comment.</summary>
        </member>
        <member name="P:Options.NoNegate">
            <summary>Suppresses the behavior of treating a leading ! character as negation.</summary>
        </member>
        <member name="P:Options.NoBrace">
            <summary>Do not expand {a,b} and {1.3} brace sets.</summary>
        </member>
        <member name="P:Options.NoGlobStar">
            <summary>Disable ** matching against multiple folder names.</summary>
        </member>
        <member name="P:Options.NoCase">
            <summary>Ignores case differences when matching.</summary>
        </member>
        <member name="P:Options.NoExt">
            <summary>Disable "extglob" style patterns like <c>+(a|b)</c>.</summary>
        </member>
        <member name="P:Options.Dot">
            <summary>Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot.
            Note that by default, <c>a/**/b</c>  will not match <c>a/.d/b</c>, unless dot is set.</summary>
        </member>
        <member name="P:Options.NoNull">
            <summary>When a match is not found by Match(), return a list containing the pattern itself. If not set, an empty list is returned if there are no matches.</summary>
        </member>
        <member name="P:Options.FlipNegate">
            <summary>Returns from negate expressions the same as if they were not negated. (ie, true on a hit, false on a miss).</summary>
        </member>
        <member name="P:Options.MatchBase">
            <summary>If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, <c>a?b</c> would match the path <c>/xyz/123/acb</c>, but not <c>/xyz/acb/123</c>.</summary>
        </member>
        <member name="P:Options.AllowWindowsPaths">
            <summary>If true, backslahes in patterns and paths will be treated as forward slashes.  This disables escape characters.</summary>
        </member>
        <member name="P:Options.IgnoreCase">
            <summary>Ignores case differences when matching.  This is the same as NoCase.</summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>02hD+AVDGf3hdxFyMCtUj2eMHhX0iJuZsTgRC9ds2FA=</DigestValue></Reference></SignedInfo><SignatureValue>IgxOv68wxbChvEnnrpwkI0oLhZLfvVMQdCYgGjXoQMynERTJpwbKTJV2g14hx1vhgtFfTO+m33pYHUUDYweb5k6QK7gnHyiD5WgbdMpUV0iaLGsXsGJiwZ+L1jBoceQRRJxjMsNT3MiFUgd5W1LUevuBQYUebw9lBiyYXUuWdafQdC8OtOjeloTrhAPlF9gPsTcfugm5YqcKXcmKg7mDa5vpC2aqpLr4ndXB2QIbrrMy9WBrvAQUkuFeefCNClvs7tKd/ANeGcKmD3VAlGTNP260710cjwo6jnE4XpMMR10wF8SKdk6CllQ6sY8KIJ+0jgUMSS3SxoZpbTr2UGXWRA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJjjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/TWO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO/WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9coT2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O0cEIvKdX8uG8oQa047+evMfDRr94MG9EWw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
