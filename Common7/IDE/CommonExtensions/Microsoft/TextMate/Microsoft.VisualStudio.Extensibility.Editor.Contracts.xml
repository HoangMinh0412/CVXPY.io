<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Extensibility.Editor.Contracts</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot">
            <summary>
            Provides read access to an immutable version of a document in the file system,
            in memory in this process, or remoted from the host Visual Studio.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> represents a document at a point in time and does not
            change. Most IDE features will be invoked with an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> with
            the state of the document when the feature was invoked.
            </para>
            <para>
            Some advanced scenarios may benefit from caching results computed against previous
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> versions. To facilitate such caching, <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />
            supports 'translating' positions and ranges on a document between versions using
            <see cref="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.TranslateTo(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)" /> and
            <see cref="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.TranslateTo(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode)" />, respectively.
            </para>
            <para>
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> is not directly mutable. Any changes must be requested
            via EditorExtensibility.EditAsync(Action&lt;IEditBatch&gt;, System.Threading.CancellationToken).
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.Length">
            <summary>
            Gets the number of UTF-16 characters contained in the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.Text">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> for the current text of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.Lines">
            <summary>
            Gets a collection of lines in this version of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.Item(System.Int32)">
            <summary>
            Gets a single character at the specified position.
            </summary>
            <param name="position">The position of the character.</param>
            <returns>The character at <paramref name="position" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="position" /> is less than zero or greater than or equal to the length of the document.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.GetLineFromPosition(System.Int32)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine" /> for a line at the given position.
            </summary>
            <param name="position">The position.</param>
            <returns>A non-null <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="position" /> is less than zero or greater than length of line.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.GetLineNumberFromPosition(System.Int32)">
            <summary>
            Gets the number of the line that contains the character at the specified position.
            </summary>
            <returns>The line number of the line in which <paramref name="position" /> lies.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="position" /> is less than zero or greater than Length/&gt;.
            </exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.Uri">
            <summary>
            The Uri of the file. Most frequently the name and path of the file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.IsDirty">
            <summary>
            Determines whether the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> is dirty.
            </summary>
            <remarks>If <c>true</c>, the contents of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> have
            changed since the file was last loaded or saved. If <c>false</c>, the contents of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> have
            not changed since the file was last loaded or saved.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.GetEditorOptionValueAsync``1(Microsoft.VisualStudio.Extensibility.Editor.TextDocumentOption{``0},System.Threading.CancellationToken)">
            <summary>
            Gets an editor option value based on the current text document scope.
            </summary>
            <typeparam name="T">Type of the option value.</typeparam>
            <param name="option">Option identifier.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>
            This method returns either:
            - the current value of option.
            - the defined default value if option is defined but not set.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when option is not set in this scope.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.TranslatePositionTo(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode)">
            <summary>
            Translates a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> forward or backward in time to this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />'s version.
            </summary>
            <param name="position">Position to translate</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode" /> to use in the translation.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> that has been mapped to the requested document version.</returns>
            <exception cref="T:System.ArgumentException">
            This <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> does not refer to the same underlying text document as this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.TranslateRangeTo(Microsoft.VisualStudio.Extensibility.Editor.TextRange,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Translates a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> forward or backward in time to this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />'s version.
            </summary>
            <param name="range">range to translate</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode" /> to use in the translation.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> that has been mapped to the requested document version.</returns>
            <exception cref="T:System.ArgumentException">
            This <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> does not refer to the same underlying text document as this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.
            </exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot.RpcContract">
            <summary>
            Converts this thick object to a serializable representation for use in an RPC call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine">
            <summary>
            Provides read access to a line in an immutable version of a document in the
            file system, in memory in this Service Hub extension, or remoted from the host
            Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine.Document">
            <summary>
            The immutable document version in which this line appears.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine.Text">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> for the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine.TextIncludingLineBreak">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> for the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine.LineNumber">
            <summary>
            The 0-origin line number of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine.LineBreakLength">
            <summary>
            Length of line break characters (always falls in the range [0..2]).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine.GetLineBreakText">
            <summary>
            The string consisting of the line break characters (if any) at the
            end of the line. Has zero length for the last line in the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextExtensions.CopyToString(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
             <summary>
             Copies the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />  to a string.
             </summary>
             <returns>A non-null string.</returns>
             <remarks>
             Copying text from a large range to a string is very expensive and should be avoided.
            
             <list type="bullet">
             <item>
             <description>
             You can use <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> and <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> to represent substrings
             in a document without expending resources copying or allocating strings. Most APIs
             operate in terms of these primitives.
             </description>
             </item>
            
             <item>
             <description>
             You can use the indexer syntax on <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />, to read or compare character
             by character in a document without copying it to a string.
             </description>
             </item>
             </list>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextExtensions.IndexOf(Microsoft.VisualStudio.Extensibility.Editor.TextRange,System.String,System.Boolean)">
            <summary>
            Determines the position of the given text in the range. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextExtensions.LastIndexOf(Microsoft.VisualStudio.Extensibility.Editor.TextRange,System.String,System.Boolean)">
            <summary>
            Determines the last position of the given text in the range. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextExtensions.StartsWith(Microsoft.VisualStudio.Extensibility.Editor.TextRange,System.String,System.Boolean)">
            <summary>
            Determines whether this range starts with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextExtensions.EndsWith(Microsoft.VisualStudio.Extensibility.Editor.TextRange,System.String,System.Boolean)">
            <summary>
            Determines whether this range ends with the given text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition">
            <summary>
            An immutable text position in a particular <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" /> is one of three closely related concepts:
            - <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />: Thick object representing a range of text in a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
              This type should be used in all code within the same process.
            - <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> that can
              be sent between processes over RPC. This type should be used in most RPC contracts between processes.
            - <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" />: A serialiable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> that can be sent between
              processes over RPC. As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />, it omits the <see cref="T:System.Uri" />
              and document version, making for a smaller serializable representation. This type should be used in RPC
              contracts that contain lots of position equivalents that need to reduce their payload size for
              performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" /> and version for the
              range to be rehydrated into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.#ctor(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> with respect to a particular <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="document">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot"> that contains the new position.</see></param>
            <param name="position">The position of the position.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Offset">
            <summary>
            Gets the position of the position as a numeric offset from the start of the document.
            </summary>
            <value>A non-negative integer less than or equal to the length of the snapshot.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Document">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> to which this snapshot position refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.RpcContract">
            <summary>
            Converts this thick object into a serializable representation for use in an RPC call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Implicit(Microsoft.VisualStudio.Extensibility.Editor.TextPosition)~Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract">
            <summary>
            Implicitly converts the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Implicit(Microsoft.VisualStudio.Extensibility.Editor.TextPosition)~System.Int32">
            <summary>
            Implicitly converts the snapshot position to an integer equal to the position of the snapshot position in the snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.GetContainingLine">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshotLine" /> containing this snapshot position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.GetChar">
            <summary>
            Gets the character at the position of this snapshot position.
            </summary>
            <returns>The character at the position of this snapshot position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the position of this position is equal to the length of the snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.TranslateTo(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode)">
            <summary>
            Translates this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> to an older or newer <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="targetDocumentVersion">The document version to which to translate.</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode" /> to use in the translation.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> that has been mapped to the requested document version.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetDocumentVersion" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetDocumentVersion" /> does not refer to the same underlying text document as this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Equals(System.Object)">
            <summary>
            Determines whether this snapshot position is the same as a second snapshot position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Add(System.Int32)">
            <summary>
            Creates a new snapshot position at the specified offset from this position.
            </summary>
            <param name="offset">The offset of the new position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new position is less than zero or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Subtract(System.Int32)">
            <summary>
            Creates a new snapshot position at the specified negative offset from this position.
            </summary>
            <param name="offset">The offset of the new position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new position is less than zero or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Difference(Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Computes the offset between this snapshot position and another snapshot position.
            </summary>
            <param name="other">The position from which to compute the offset.</param>
            <exception cref="T:System.ArgumentException">The two positions do not belong to the same
            snapshot.</exception>
            <returns>The offset between the two positions, equivalent to other.Offset -
            this.Offset.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Subtraction(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,System.Int32)">
            <summary>
            Decrements the position of a snapshot position.
            </summary>
            <param name="position">The position from which to calculate the new position.</param>
            <param name="offset">The offset of the new position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new position is less than zero
            or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Subtraction(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Computes the offset between two <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> objects.
            </summary>
            <param name="start">The starting position.</param>
            <param name="other">The position from which to compute the offset.</param>
            <exception cref="T:System.ArgumentException">The two positions do not belong to the same
            snapshot.</exception>
            <returns>The offset between the two positions, equivalent to start.Offset -
            other.Offset.</returns>
            <remarks>The following should always be true:
            start == other + (start - other).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Equality(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Determines whether this snapshot position is the same as a second snapshot position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Inequality(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Determines whether this snapshot position is different from a second snapshot position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_Addition(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,System.Int32)">
            <summary>
            Increments the position of a snapshot position.
            </summary>
            <param name="position">The position from which to calculate the new position.</param>
            <param name="offset">The offset of the new position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The new position is less than zero
            or greater than Snapshot.Length.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_GreaterThan(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Determines whether the position of one snapshot position is greater than the position of a second snapshot position.
            </summary>
            <returns><c>true</c> if the first position is greater than the second position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The two positions do not belong to the same snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.op_LessThan(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Determine if the position of the left position is less than the position of the right position.
            </summary>
            <returns><c>true</c> if left.Offset is greater than right.Offset, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The two positions do not belong to the same snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.CompareTo(Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Determines whether this snapshot is the same as a second snapshot position.
            </summary>
            <param name="other">The snapshot position to which to compare.</param>
            <returns>A negative integer if the position of this snapshot position occurs before the second snapshot position, 
            a positive integer if the position of this snapshot position occurs before the second snapshot position, and 
            zero if the positions are the same.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode">
            <summary>
            Represents tracking modes for <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />s across versions of an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode.Positive">
            <summary>
            With this setting, a position tracks toward the end of the document, so that an
            insertion at the current position pushes the position to the end of the inserted text. 
            If a replacement contains the position, it will end up at the end of the replacement text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextPositionTrackingMode.Negative">
            <summary>
            With this setting, a position tracks toward the beginning of the document, 
            so that an insertion at the current position leaves the position unaffected.  If a
            replacement contains the position, it will end up at the beginning of the replacement text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange">
            <summary>
            An immutable text range in a particular <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> is one of four closely related concepts:
            </para>
            <para><list type="bullet"><item>
              <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />: Thick object representing a range of text in a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
              This type should be used in all code within the same process.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> that can
              be sent between processes over RPC. This type should be used in most RPC contracts between processes.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> that can be sent between processes over RPC.
              As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />, it omits the <see cref="T:System.Uri" /> and document version, making
              for a smaller serializable representation. This type should be used in RPC contracts that contain lots of range equivalents
              that need to reduce their payload size for performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" />
              and version for the range to be rehydrated into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService" />.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />, similar to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />.
              As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />, the document position is saved as two integers (<see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Start" /> and
              <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Length" />) instead of four (<see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartLine" />, <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartColumn" />,
              <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndLine" /> and <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndColumn" />). This type omits the <see cref="T:System.Uri" /> and document version
              also and should be used in RPC contracts that contain lots of range equivalents that need to reduce their payload size for
              performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" /> and version for the range to be rehydrated
              into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.ToTextRange(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)" />.
            </item></list></para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> with the specified document, start point, and length.
            </summary>
            <param name="document">The text document version on which to base the range.</param>
            <param name="start">The starting point of the range.</param>
            <param name="length">The length of the range.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="document" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start" /> is negative or greater than <paramref name="document" />.Length, or
            <paramref name="length" /> is negative or <paramref name="start" /> + <paramref name="length" /> is greater than
            <paramref name="document" />.Length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> from two <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> objects.
            </summary>
            <param name="start">The start position.</param>
            <param name="end">The end position, which must be from the same <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />
            as the start point.</param>
            <exception cref="T:System.ArgumentException">The positions belong to different 
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> objects.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end point comes before the start
            point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> from an existing <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> and a specified length.
            </summary>
            <param name="start">The starting position.</param>
            <param name="length">The length of the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is negative or 
            <paramref name="start" /> + <paramref name="length" /> is greater than the length of the snapshot.
            </exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Document">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> to which this snapshot range refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.RpcContract">
            <summary>
            Converts this thick object into a serializable representation for use in an RPC call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Slice(System.Int32,System.Int32)">
            <summary>
            Create a slice of the current <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />.
            </summary>
            <param name="start">The index at which to begin this slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>A slice that consists of <paramref name="length" /> characters from the current instance starting at index <paramref name="start" />.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Item(System.Int32)">
            <summary>
            Gets a single character at the specified position.
            </summary>
            <param name="position">The position of the character.</param>
            <returns>The character at <paramref name="position" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="position" /> is less than zero or greater than or equal to the length of the text.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.CopyTo(System.Span{System.Char})">
            <summary>
            Copy this text to the specified <see cref="T:System.Span`1" />.
            </summary>
            <param name="destination">The destination <see cref="T:System.Span`1" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.TranslateTo(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Translates this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> to an older or newer <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="targetDocumentVersion">The document version to which to translate.</param>
            <param name="rangeTrackingMode">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode" /> to use in the translation.</param>
            <returns>A new snapshot range.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetDocumentVersion" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetDocumentVersion" /> does not refer to the same underlying text document as this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.op_Implicit(Microsoft.VisualStudio.Extensibility.Editor.TextRange)~Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract">
            <summary>
            Implicitly converts the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Equals(System.String,System.Boolean)">
            <summary>
            Determines whether the text of this range is equivalent to a string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Start">
            <summary>
            Gets the starting index of the snapshot range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.End">
            <summary>
            Gets the end of the snapshot range. The range is open-ended on the right side, which is to say
            that Start + Length = End.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Length">
            <summary>
            Gets the length of the range, which is always non-negative.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.IsEmpty">
            <summary>
            Determines whether or not this range is empty.
            </summary>
            <value><c>true</c> if the length of the range is zero, otherwise <c>false</c>.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Contains(System.Int32)">
            <summary>
            Determines whether the position lies within the range.
            </summary>
            <param name="position">
            The position to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to parameter range.Start and strictly less than parameter range.End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Contains(Microsoft.VisualStudio.Extensibility.Editor.TextPosition)">
            <summary>
            Determines whether a given <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> lies within the range.
            </summary>
            <param name="position">
            The point to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to parameter range.Start and strictly less than parameter range.End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Contains(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Determines whether <paramref name="range" /> falls completely within this range.
            </summary>
            <param name="range">
            The range to check.
            </param>
            <returns>
            <c>true</c> if the specified range falls completely within this range, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.OverlapsWith(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Determines whether <paramref name="range" /> overlaps this range. 
            Two ranges are considered to overlap if they have positions in common and are not empty. Empty ranges do not overlap with any other range.
            </summary>
            <param name="range">
            The range to check for overlap.
            </param>
            <returns>
            <c>true</c> if the ranges overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Overlap(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Returns the overlap with the given <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />, or null if there is no overlap.
            </summary>
            <param name="range">The range to check.</param>
            <exception cref="T:System.ArgumentException"><paramref name="range" /> does not refer to the same
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> as this snapshot range.</exception>
            <returns>The overlap of the ranges, or null if the overlap is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.IntersectsWith(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Determines whether <paramref name="range" /> intersects this range. Two ranges are considered to 
            intersect if they have positions in common, or the end of one range 
            coincides with the start of the other range, and neither is empty.
            </summary>
            <param name="range">
            The range to check.
            </param>
            <returns>
            <c>true</c> if the ranges intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Intersection(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Computes the intersection with the given <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />, or null if there is no intersection.
            </summary>
            <param name="range">
            The range to check.
            </param>
            <exception cref="T:System.ArgumentException"><paramref name="range" /> does not refer to the same snapshot. </exception>
            <returns>
            The intersection of the ranges, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Equals(System.Object)">
            <summary>
            Determines whether two snapshot ranges are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.op_Equality(Microsoft.VisualStudio.Extensibility.Editor.TextRange,Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Determines whether two snapshot ranges are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextRange.op_Inequality(Microsoft.VisualStudio.Extensibility.Editor.TextRange,Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Determines whether two snapshot ranges are different.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode">
            <summary>
            Represents tracking modes for <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> objects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode.EdgeExclusive">
            <summary>
            The leading edge of the range is positive tracking (insertions push the current position towards the end) 
            and the trailing edge is negative tracking (insertions push the current position towards the start).
            The range will not expand when text changes occur at the range boundaries. For example,
            if an EdgeExclusive range has Start position 3, and a single character is inserted at position 3,
            the range will then have Start position 4 and its length will be unchanged.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode.EdgeInclusive">
            <summary>
            The leading edge of the range is negative tracking (insertions push the current position toward the start) 
            and the trailing edge is positive tracking (insertions push the current position toward the end).
            The range will expand when text changes occur at the range boundaries. For example,
            if an EdgeInclusive range has Start position 3, and a single character is inserted at position 3,
            the range will then have Start position 3 and its length will be increased by one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode.EdgePositive">
            <summary>
            Both edges of the range are positive tracking (insertions push the current position toward the end).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode.EdgeNegative">
            <summary>
            Both edges of the range are negative tracking (insertions push the current position toward the start).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode.Custom">
            <summary>
            Custom client-determined tracking behavior.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1">
            <summary>
            Immutable object that supports being asynchronously editable via a call to
            EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken)
            </summary>
            <typeparam name="TEditor">The type of the object that does the edit.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1.AsEditable(Microsoft.VisualStudio.Extensibility.Editor.IEditBatch)">
            <summary>
            Gets an interface with methods for requesting changes to the
            underlying <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1" /> object.
            </summary>
            <param name="batch">
            A batch of edits created within a call to EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken).
            </param>
            <returns>An object that performs edits on the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1" /> object.</returns>
            <remarks>
            This method and the value it returns is only supported within the <see cref="T:System.Action`1" />
            accepted by EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken).
            After it returns, the returned object is no longer valid.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1.CreateEditor(Microsoft.VisualStudio.Extensibility.Editor.IEditBatch)">
            <summary>
            An internal implementation detail of the Visual Studio out of process extensibility
            system that maintains a single instance of an editor for an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1" />
            object.
            </summary>
            <param name="editBatch">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditBatch" /> to create the editor for.</param>
            <returns>The object with methods for editing the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1" /> object.</returns>
            <remarks>
            This method should be called by <see cref="M:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1.AsEditable(Microsoft.VisualStudio.Extensibility.Editor.IEditBatch)" /> via
            <see cref="M:Microsoft.VisualStudio.Extensibility.Editor.IEditBatch.GetOrCreateEditor``1(Microsoft.VisualStudio.Extensibility.Editor.IEditable{``0})" /> to ensure
            that only one instance is created per <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditBatch" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.IEditBatch">
            <summary>
            Exposes a way to acquire an instance of a object for
            modifying some <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditable`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditBatch.AddEditRpcContract(Microsoft.VisualStudio.RpcContracts.Editor.EditContractBase)">
            <summary>
            Registers an RPC request to happen as part of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract" />
            request to <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextEditorSynchronizationServiceContract.ApplyEditAsync(Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract,System.Threading.CancellationToken)" />.
            </summary>
            <param name="rpcContract">The RPC contract of the operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditBatch.GetOrCreateEditor``1(Microsoft.VisualStudio.Extensibility.Editor.IEditable{``0})">
            <summary>
            Gets an object that exposes methods for modifying <paramref name="editable" />.
            </summary>
            <typeparam name="TEditor">The specific type of the editor object.</typeparam>
            <param name="editable">The object being edited.</param>
            <returns>An instance of an object that can change the target object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor">
            <summary>
            Exposes methods for changing an immutable <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> instance.
            </summary>
            <remarks>
            You can acquire an instance of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor" /> within the function
            passed to
            EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken)
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document">
            <summary>
            The specific version of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> that the edit(s)
            will be applied to, unless otherwise specified as part of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />
            or <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Insert(System.Int32,System.String)">
            <summary>
            Inserts the specified text at the specified position in the
            document.
            </summary>
            <param name="position">The position to start inserting.</param>
            <param name="text">The text to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Delete(Microsoft.VisualStudio.Extensibility.Editor.TextRange)">
            <summary>
            Deletes the specified <paramref name="range" /> of text from the document.
            </summary>
            <param name="range">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> of text to delete.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Replace(Microsoft.VisualStudio.Extensibility.Editor.TextRange,System.String)">
            <summary>
            Replaces the text within <paramref name="replaceRange" /> with
            <paramref name="replaceWith" />.
            </summary>
            <param name="replaceRange">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> of text to replace.</param>
            <param name="replaceWith">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> of text to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Rename(System.String)">
            <summary>
            Renames <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document" /> to <paramref name="newFilePath" />.
            </summary>
            <param name="newFilePath"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Reload">
            <summary>
            Reloads the document from disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Save">
            <summary>
            Saves the contents of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document" /> to disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the contents of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document" /> to disk with the new <paramref name="filePath" />.
            </summary>
            <param name="filePath">The new file path for the document.</param>
            <param name="overwrite">If <c>true</c>, replaces the existing file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the contents of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document" /> to disk with the new <paramref name="filePath" />.
            </summary>
            <param name="filePath">The new file path for the document.</param>
            <param name="overwrite">If <c>true</c>, replaces the existing file.</param>
            <param name="createFolder">If <c>true</c>, creates the destination folder, if it does not yet exist.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.SaveCopy(System.String,System.Boolean)">
            <summary>
            Saves the contents of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document" /> to disk with the new <paramref name="filePath" />.
            Does not update the <see cref="T:System.Uri" /> of the underlying document, as used by subsequent <see cref="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Save" />s.
            </summary>
            <param name="filePath">The new file path for the document.</param>
            <param name="overwrite">If <c>true</c>, replaces the existing file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.SaveCopy(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the contents of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Document" /> to disk with the new <paramref name="filePath" />.
            Does not update the <see cref="T:System.Uri" /> of the underlying document, as used by subsequent <see cref="M:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentEditor.Save" />s.
            </summary>
            <param name="filePath">The new file path for the document.</param>
            <param name="overwrite">If <c>true</c>, replaces the existing file.</param>
            <param name="createFolder">If <c>true</c>, creates the destination folder, if it does not yet exist.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewEditor">
            <summary>
            Exposes methods for changing an immutable <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> instance.
            </summary>
            <remarks>
            You can acquire an instance of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewEditor" /> within the function
            passed to
            EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken)
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextEdit">
            <summary>
            A list of changes applied to a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextEdit.Range">
            <summary>
            The range to replace. Can be zero length.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextEdit.Text">
            <summary>
            The new text to insert.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService">
            <summary>
            Rehydrates Editor RPC contracts into thick objects.
            </summary>
            <remarks>
            Extensions should rarely need to interact with this service. Rather, it's merely
            supporting infrastructure for the frameworks composing the Visual Studio Extensibility
            system.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreateActiveTextViewAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> from the properties contained in <paramref name="clientContext" />.
            </summary>
            <param name="clientContext">UI properties, including document version (Microsoft.VisualStudio.Extensibility.Framework.IClientContext as dictionary).</param>
            <param name="cancellationToken">Cancels the creation action.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> thick object that can be used to interact with the editor.</returns>
            <remarks>
            This overload is meant primarily for creating <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" />s based on properties captured during
            command invocation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreateTextViewAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> from a serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract" /> RPC contract.
            </summary>
            <param name="textView">A serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract" /> RPC contract.</param>
            <param name="cancellationToken">Cancels the request.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> thick object that can be used to interact with the editor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreateTextDocumentAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> from a serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract" /> RPC contract.
            </summary>
            <param name="textDocument">A serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract" /> RPC contract.</param>
            <param name="cancellationToken">Cancels the request.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> thick object that can be used to interact with the document.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreateSpanAsync(Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> from a serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" /> RPC contract and other version
            metadata.
            </summary>
            <param name="range">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" /> to realize into a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />.</param>
            <param name="cancellationToken">Cancels the request.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> thick object that can be used to interact with the text of the span in the document.
            </returns>
            <remarks>
            This overload potentially forces a load of the document if it's not yet open, accessible via
            <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Document" />. Since this is potentially expensive, it's recommended that you only
            create <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />s when you actually need to view the content of the document and not
            just the range.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreateSpanAsync(System.Uri,System.Int32,Microsoft.VisualStudio.RpcContracts.Utilities.Range,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> from a serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" /> RPC contract and other version
            metadata.
            </summary>
            <param name="documentUri">The <see cref="T:System.Uri" /> of the document.</param>
            <param name="version">The version number to create the span on.</param>
            <param name="range">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" /> to realize into a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />.</param>
            <param name="cancellationToken">Cancels the request.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> thick object that can be used to interact with the text of the span in the document.
            </returns>
            <remarks>
            This overload potentially forces a load of the document if it's not yet open, accessible via
            <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Document" />. Since this is potentially expensive, it's recommended that you only
            create <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />s when you actually need to view the content of the document and not
            just the range.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreatePositionAsync(Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> from a serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />
            RPC contract and other version metadata.
            </summary>
            <param name="textDocumentPosition">
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" /> to realize into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.
            </param>
            <param name="cancellationToken">Cancels the request.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> thick object that can be used to interact with the text of the span in the document.
            </returns>
            <remarks>
            This overload potentially forces a load of the document if it's not yet open, accessible via
            <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Document" />. Since this is potentially expensive, it's recommended that you only
            create <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />s when you actually need to view the content of the document and not
            just the range.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService.CreatePositionAsync(System.Uri,System.Int32,Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> from a serializable <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> RPC contract and other version
            metadata.
            </summary>
            <param name="documentUri">The <see cref="T:System.Uri" /> of the document.</param>
            <param name="version">The version number to create the span on.</param>
            <param name="position">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> to realize into a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.</param>
            <param name="cancellationToken">Cancels the request.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> thick object that can be used to interact with the text of the span in the document.
            </returns>
            <remarks>
            This overload potentially forces a load of the document if it's not yet open, accessible via
            <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextPosition.Document" />. Since this is potentially expensive, it's recommend that you only
            create <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />s when you actually need to view the content of the document and not
            just the range.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.EditorOption`2">
            <summary>
            Base class for declaring an editor option.
            </summary>
            <typeparam name="T">Option value type.</typeparam>
            <typeparam name="S">Scope type such as <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" />.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.EditorOption`2.Name">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOption`2.#ctor(System.String)">
            <summary>
            Creates an editor text view option with the provided option name.
            </summary>
            <param name="name">Option name in scope of a text view.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOption`2.GetValue(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOption`2.op_Equality(Microsoft.VisualStudio.Extensibility.Editor.EditorOption{`0,`1},Microsoft.VisualStudio.Extensibility.Editor.EditorOption{`0,`1})">
            <summary>
            Determines whether two instances of this type are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOption`2.op_Inequality(Microsoft.VisualStudio.Extensibility.Editor.EditorOption{`0,`1},Microsoft.VisualStudio.Extensibility.Editor.EditorOption{`0,`1})">
            <summary>
            Determines whether two instances of this type are different.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1">
            <summary>
            The value of an editor option.
            </summary>
            <typeparam name="T">The type of the editor option's value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1" /> class.
            </summary>
            <param name="value">The value of the editor option.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1" /> class.
            </summary>
            <param name="error">The error that occurred during the retrieval of the editor option value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.Value">
            <summary>
            Gets the value of the editor option.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.ValueOrDefault(`0)">
            <summary>
            Gets the value, if the retrieval was successful. Returns <paramref name="defaultValue" /> otherwise.
            </summary>
            <param name="defaultValue">The value to return in case of error reading the editor option's value.</param>
            <returns>The value converted to the type <typeparamref name="T" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.Microsoft#VisualStudio#Extensibility#Editor#IEditorOptionValue#Value``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.Microsoft#VisualStudio#Extensibility#Editor#IEditorOptionValue#ValueOrDefault``1(``0)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.Error">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.EditorOptionValue`1.Succeeded">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorOption`1">
            <summary>
            Base class for declaring a text view option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.IEditorOption`1.Name">
            <summary>
            Gets the option name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorOption`1.GetValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a JToken to the option value type.
            </summary>
            <param name="jsonToken">JsonToken retrieved from editor option APIs.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue">
            <summary>
            The value of an editor option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue.Error">
            <summary>
            The error that occurred during the retrieval of the editor option value. <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue.Error" /> is <see langword="null" />
            if the retrieval of the value was successful.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue.Succeeded">
            <summary>
            Gets a value indicating whether <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue.Error" /> is <see langword="null" />, meaning that the retrieval of the editor option's value was successful.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue.Value``1">
            <summary>
            Gets the value converted to the type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The expected type of the editor option.</typeparam>
            <returns>The value converted to the type <typeparamref name="T" />.</returns>
            <exception cref="T:System.InvalidCastException">The conversion of the value to <typeparamref name="T" /> is not supported.</exception>
            <exception cref="T:System.OverflowException">The value represents a number that is out of the range of <typeparamref name="T" />.
            </exception>
            <exception cref="T:System.ArgumentException">The editor option doesn't exist.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.IEditorOptionValue.ValueOrDefault``1(``0)">
            <summary>
            Gets the value converted to the type <typeparamref name="T" />, if the retrieval and the conversion to <typeparamref name="T" /> are successful.
            Returns <paramref name="defaultValue" /> otherwise.
            </summary>
            <param name="defaultValue">The value to return in case of error reading the editor option's value.</param>
            <typeparam name="T">The expected type of the setting.</typeparam>
            <returns>The value converted to the type <typeparamref name="T" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextDocumentOption`1">
            <summary>
            Base class for declaring a text document option.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextDocumentOption`1.#ctor(System.String)">
            <summary>
            Creates an editor text document option with the provided option name.
            </summary>
            <param name="name">Option name in scope of a text document.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextViewOption`1">
            <summary>
            Base class for declaring a text view option.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextViewOption`1.#ctor(System.String)">
            <summary>
            Creates an editor text view option with the provided option name.
            </summary>
            <param name="name">Option name in scope of a text view.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange">
            <summary>
            A <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> with an associated <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.TextRange,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" /> with the specified range and tracking mode.
            </summary>
            <param name="range">The range.</param>
            <param name="trackingMode">The tracking mode.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,System.Int32,System.Int32,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" /> with the specified start point, length and tracking mode.
            </summary>
            <param name="document">The text document version on which to base the range.</param>
            <param name="start">The starting point of the range.</param>
            <param name="length">The length of the range.</param>
            <param name="trackingMode">The tracking mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextPosition,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" /> with the specified start point, end point and tracking mode.
            </summary>
            <param name="start">The start position.</param>
            <param name="end">The end position, which must be from the same <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /></param>
            <param name="trackingMode">The tracking mode.</param>
            <exception cref="T:System.ArgumentException">The positions belong to different 
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> objects.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end point comes before the start
            point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.#ctor(Microsoft.VisualStudio.Extensibility.Editor.TextPosition,System.Int32,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" /> with the specified start point, length and tracking mode.
            </summary>
            <param name="start">The starting position.</param>
            <param name="length">The length of the range.</param>
            <param name="trackingMode">The tracking mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is negative or 
            <paramref name="start" /> + <paramref name="length" /> is greater than the length of the snapshot.
            </exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.Range">
            <summary>
            Gets the range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.TrackingMode">
            <summary>
            Gets the tracking mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.Start">
            <inheritdoc cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Start" />
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.Length">
            <inheritdoc cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.Length" />
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.End">
            <inheritdoc cref="P:Microsoft.VisualStudio.Extensibility.Editor.TextRange.End" />
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange.TranslateTo(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)">
            <summary>
            Translates this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" /> to an older or newer <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="targetDocumentVersion">The document version to which to translate.</param>
            <returns>A new tracking range.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetDocumentVersion" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetDocumentVersion" /> does not refer to the same underlying text document as this <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot">
            <summary>
            Provides immutable, read access to properties of a text editor remoted from
            the host Visual Studio.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> represents an editor at a point in time and does not
            change. Most IDE features will be invoked with an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> with
            the state of the editor when the feature was invoked.
            </para>
            <para>
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> is not directly mutable. Any changes must be requested
            via EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken)
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.Document">
            <summary>
            Gets the document associated with this text editor. The document will be the same for the entire lifetime
            of this text editor. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.RpcContract">
            <summary>
            Converts this thick object to a serializable representation for use in an RPC call.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.Uri">
            <summary>
            The Uri of the document. Most frequently the name and path of the file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.FilePath">
            <summary>
            The <see cref="P:System.Uri.LocalPath" /> of this document's Uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.Selection">
            <summary>
            The primary selection on this text view. Shorthand for this.Selections[0].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.Selections">
            <summary>
            The selections in this text view. The primary selection is always at index 0.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.GetOptionValueAsync``1(Microsoft.VisualStudio.Extensibility.Editor.TextDocumentOption{``0},System.Threading.CancellationToken)">
            <summary>
            Gets an editor option value based on the scope of text document in this view.
            </summary>
            <typeparam name="T">Type of the option value.</typeparam>
            <param name="option">Option identifier.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>
            This method returns either:
            - the current value of option.
            - the defined default value if option is defined but not set.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when option is not set in this scope.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot.GetOptionValueAsync``1(Microsoft.VisualStudio.Extensibility.Editor.TextViewOption{``0},System.Threading.CancellationToken)">
            <summary>
            Gets an editor option value based on the current text view scope.
            </summary>
            <typeparam name="T">Type of the option value.</typeparam>
            <param name="option">Option identifier.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>
            This method returns either:
            - the current value of option.
            - the defined default value if option is defined but not set..
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when option is not set in this scope.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.Selection">
            <summary>
            Manages the insertion, anchor, and active positions for a single caret and its associated
            selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Extensibility.Editor.Selection.Invalid">
            <summary>
            A static instance of a selection that is invalid and can be used to check for instantiation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.Selection.#ctor(Microsoft.VisualStudio.Extensibility.Editor.TextRange,System.Boolean)">
            <summary>
            Instantiates a new Selection with the given extent. Anchor and active points are defined by isReversed, and the
            insertion point is located at the active point.
            </summary>
            <param name="extent">The span that the selection covers.</param>
            <param name="isReversed">
            True implies that <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition" /> comes before <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.AnchorPosition" />.
            The <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.InsertionPosition" /> is set to the <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition" />.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition">
            <summary>
            Gets the location of the movable selection endpoint, meaning if a user were to hold shift and click,
            this point would be changed to the location of the click. If this is an empty selection, this will be at the
            <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.InsertionPosition" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.AnchorPosition">
            <summary>
            Gets the location of the fixed selection endpoint, meaning if a user were to hold shift and click,
            this point would remain where it is. If this is an empty selection, this will be at the
            <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.InsertionPosition" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.InsertionPosition">
            <summary>
            Gets the location where a caret should be rendered and edits performed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.IsReversed">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.AnchorPosition" /> is later in the document than <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition" />. False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.IsEmpty">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.AnchorPosition" /> equals <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition" />. False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.Start">
            <summary>
            Returns the smaller of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition" /> and <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.AnchorPosition" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.End">
            <summary>
            Returns the larger of <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.ActivePosition" /> and <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.AnchorPosition" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.Extent">
            <summary>
            Returns the span from <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.Start" /> to <see cref="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.End" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.Selection.op_Equality(Microsoft.VisualStudio.Extensibility.Editor.Selection,Microsoft.VisualStudio.Extensibility.Editor.Selection)">
            <summary>
            Indicates whether <paramref name="left" /> and <paramref name="right" /> equiavlent.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if the items are equiavlent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.Selection.op_Inequality(Microsoft.VisualStudio.Extensibility.Editor.Selection,Microsoft.VisualStudio.Extensibility.Editor.Selection)">
            <summary>
            Indicates whether <paramref name="left" /> and <paramref name="right" /> different.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if the items are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.Selection.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.Selection.Equals(System.Object)">
            <summary>
            Determines whether this selection is the same as other selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.Selection.RpcContract">
            <summary>
            Converts this thick object into a serializable representation for use in an RPC call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs">
            <summary>
            Arguments for a text view change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs.#ctor(Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot,Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Extensibility.Editor.TextEdit})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs" />.
            </summary>
            <param name="beforeTextView">The state of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> before the change.</param>
            <param name="afterTextView">The state of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> after.</param>
            <param name="edits">A list of changes applied to the text document.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs.BeforeTextView">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs.AfterTextView">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> after the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs.Edits">
            <summary>
            A list of changes applied to the text document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract">
            <summary>
            RPC contract representing a context information for the code element
            (range in the document as well as additional properties passed in by CodeLens tagger).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract.Range">
            <summary>
            Versioned text document range for the code element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract.Properties">
            <summary>
            A property bag storing additional properties for the code element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract">
            <summary>
            RPC contract describing a code element in a document on which CodeLens providers would be requested to provide CodeLenses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract.Kind">
            <summary>
            The kind of the code element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract.Description">
            <summary>
            A short description for the code element (e.g. method name along with containing type name).
            Used for display purposes (e.g. in the title of the CodeLens tool window if CodeLens details popup is promoted).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract.UniqueIdentifier">
            <summary>
            Language specific unique identifier of the code element (e.g. fully qualified method name).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract.ProjectGuid">
            <summary>
            A <see cref="T:System.Guid" /> identifying the project to which the document belongs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensLabelContract">
            <summary>
            RPC contract representing CodeLens label.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensLabelContract.Text">
            <summary>
            The description text being displayed in the UI indicator of the CodeLens.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensLabelContract.Tooltip">
            <summary>
            The tooltip text for the UI indicator of the CodeLens.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensLabelContract.Image">
            <summary>
            The image content of the CodeLens label.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract">
            <summary>
            Represents the CodeLens tag, which is used to place CodeLenses on a view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.Kind">
            <summary>
            Gets or sets the kind of the code element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.Description">
            <summary>
            A short description for the code element (e.g. method name along with containing type name).
            Used for display purposes (e.g. in the title of the CodeLens tool window if CodeLens details popup is promoted).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.UniqueIdentifier">
            <summary>
            Language specific unique identifier of the code element (e.g. fully qualified method name).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.ProjectGuid">
            <summary>
            A <see cref="T:System.Guid" /> identifying the project to which the document belongs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.Properties">
            <summary>
            A property bag storing additional properties for the code element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.DisplayBeforeCreatingDataPoints">
            <summary>
            Defines whether this tag should be displayed before creating data points.
            </summary>
            <remarks>
            <para>
            <c>true</c> indicates that the tag should be visualized as soon as possible, before
            evaluating data points. This value should be used when it's guaranteed that there always be at least one
            data point for this tag (otherwise it might be visualized as an empty space).
            </para>
            <para>
            <c>false</c> indicates that the tag should not be visualized until at least one data point
            is created for this tag. This value should be used when it's not guaranteed that there will always be
            at least one data point for this tag. The tag may be visualized later, but will never be visualized empty.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.Equals(Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.Equals(Microsoft.VisualStudio.RpcContracts.Editor.ITagContract)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensTagContract.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract">
            <summary>
            Describes a set of state changes that should be made by the process
            owning the entities to be changed, on behalf of the extension.
            </summary>
            <remarks>
            <para>
            Can be used with <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextEditorSynchronizationServiceContract.ApplyEditAsync(Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract,System.Threading.CancellationToken)" />.
            </para>
            <para>
            Prefer EditorExtensibility.EditAsync(System.Action&lt;IEditBatch&gt;, System.Threading.CancellationToken)
            to using the RPC contracts directly.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract.Edits">
            <summary>
            A set of changes to apply to text documents.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.EditContractBase">
            <summary>
            RPC contract base class for state change operations that can be submitted as part of an atomic transaction via
            <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextEditorSynchronizationServiceContract.ApplyEditAsync(Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract,System.Threading.CancellationToken)" />.
            </summary>
            <remarks>
            Must have <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute" /> for each sub-class.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs">
            <summary>
            Arguments that are sent when an editor option is changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs.#ctor(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs" /> class.
            </summary>
            <param name="optionName">Option key that is updated.</param>
            <param name="newValue">New value of the option, null if option is cleared.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs.OptionName">
            <summary>
            Gets the option key that is updated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs.NewValue">
            <summary>
            Gets the new value for the option, this is set to null if option is cleared.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.EditorServices">
            <summary>
            Descriptors for internal Editor RPC services for Gladstone Extensibility.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditorServices.TextEditorSynchronizationServiceDescriptor">
            <summary>
            Descriptor for text editor synchronization and buffer manipulation service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditorServices.EditorOptionsServiceDescriptor">
            <summary>
            Descriptor for editor options service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.EditResponseContract">
            <summary>
            RPC contract for an atomically applied set of edits, applied across multiple documents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditResponseContract.Succeeded">
            <summary>
            <c>true</c> if all operations completed successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditResponseContract.Message">
            <summary>
            Contains any high level error messages or <see cref="F:System.String.Empty" /> if none.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditResponseContract.DocumentEditResults">
            <summary>
            Contains per-document operation results including per document errors and updated <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />
            versions.
            </summary>
            <remarks>
            Key of dictionary is the version of the document prior to the edits.
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditResponseContract.After" /> contains the updated document version.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.EditResponseContract.TextViewEditResults">
            <summary>
            Contains per-view operation results including per text view errors and updated <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" />
            versions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.EditResult">
            <summary>
            Result of an edit operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.Success">
            <summary>
            Operation completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.DocumentChanged">
            <summary>
            Operation failed due to the document changing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.DocumentNotOpen">
            <summary>
            Operation failed because the target document is not open in the host process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.TextViewNotOpen">
            <summary>
            Operation failed because the target text view is not open in the host process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.DocumentVersionTooOld">
            <summary>
            Operation failed because the target document version is too old.
            Try again with a newer version.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.Aborted">
            <summary>
            Operation was aborted for some reason. Check Message property for
            more information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensClient">
            <summary>
            RPC contract representing a CodeLens client, used by CodeLens providers to raise ICodeLens.Invalidated event.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensContract" /> cannot have events as it's <see cref="T:StreamJsonRpc.RpcMarshalableAttribute" /> interface,
            so instead we are passing <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensClient" /> from VS to extension hosts to allow
            CodeLens providers indicate that the CodeLens is invalidated.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensClient.OnCodeLensInvalidated">
            <summary>
            Gets called when CodeLens provider raises ICodeLens.Invalidated event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensContract">
            <summary>
            RPC contract representing a CodeLens instance created by CodeLens provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensContract.GetLabelAsync(Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.CodeLensLabelContract" /> for the CodeLens instance.
            </summary>
            <param name="codeElementContextContract">A context information for the code element
            (range in the document as well as additional properties passed in by CodeLens tagger).</param>
            <param name="token">Cancellation token to observe.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensProviderContract">
            <summary>
            RPC contract representing a CodeLens provider instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensProviderContract.TryCreateCodeLensAsync(Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract,Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract,Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensClient,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensContract" />, on request, from a given <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContract" />.
            </summary>
            <param name="codeElementContract">RPC contract of the code element.</param>
            <param name="codeElementContextContract">RPC contract of the code element's context.</param>
            <param name="codeLensClient"><see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensClient" /> to raise ICodeLens.Invalidated event.
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensContract" /> cannot have events as it's <see cref="T:StreamJsonRpc.RpcMarshalableAttribute" /> interface.
            </param>
            <param name="token">Cancellation token to observe.</param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ICodeLensContract" /> representing ICodeLens created by a CodeLens provider.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.IEditorOptionsService">
            <summary>
            This is a private brokered service running in the main VS process that provides access to text view options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.IEditorOptionsService.GetTextViewOptionValueAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the JToken representation of an option value scoped to the given text view.
            </summary>
            <param name="textView">Text view contract that defines the scope for the option.</param>
            <param name="optionName">Option name.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>a JToken instance if option is defined and readable.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when option is not defined.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.IEditorOptionsService.GetTextDocumentOptionValueAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the JToken representation of an option value scoped to the given text document.
            </summary>
            <param name="document">Document contract that defines the scope for the option.</param>
            <param name="optionName">Option name.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>a JToken instance if option is defined and readable.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when option is not defined.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.IEditorOptionsService.SubscribeToTextViewOptionChangesAsync(System.IObserver{Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs},Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.String,System.Threading.CancellationToken)">
            <summary>
            Subscribe to changes for a given option name in scope of the text view.
            The subscription is intended to live for the lifetime of the text view.
            </summary>
            <param name="observer">Observer for option changes.</param>
            <param name="textView">Text view contract that defines the scope for the option.</param>
            <param name="optionName">Option name.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>a disposable object for lifetime of the subscription.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.IEditorOptionsService.SubscribeToTextDocumentOptionChangesAsync(System.IObserver{Microsoft.VisualStudio.RpcContracts.Editor.EditorOptionChangedArgs},Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.String,System.Threading.CancellationToken)">
            <summary>
            Subscribe to changes for a given option name in scope of the document contract using document uri.
            The subscription is intended to live for the lifetime of the document.
            </summary>
            <param name="observer">Observer for option changes.</param>
            <param name="document">Document contract that defines the scope for the option.</param>
            <param name="optionName">Option name.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>a disposable object for lifetime of the subscription.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.IInvokableCodeLensContract">
            <summary>
            RPC contract representing an invokable CodeLens instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.IInvokableCodeLensContract.ExecuteAsync(Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Invokes the CodeLens instance, typically when user clicks on its label.
            </summary>
            <param name="codeElementContextContract">A context information for the code element
            (range in the document as well as additional properties passed in by CodeLens tagger).</param>
            <param name="clientContext">The state of VS process at the point of invocation.</param>
            <param name="cancelToken">Cancellation token to observe.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITagContract">
            <summary>
            A tag that can be associated with a span of text.
            </summary>
            <remarks><see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ITagContract" /> is used by VisualStudio.Extensibility extensions when communicating tags to Editor.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextEditorSynchronizationServiceContract">
            <summary>
            This is a private brokered service running in the main VS process and representing “source of truth” regarding text document content.
            It provides callers with document content of specific versions and can provide updates as documents are changing.
            It also applies changes submitted by extensions to documents and text views.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextEditorSynchronizationServiceContract.ApplyEditAsync(Microsoft.VisualStudio.RpcContracts.Editor.CompoundEditContract,System.Threading.CancellationToken)">
            <summary>
            Applies a set of edits to editable objects such as <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract" /> and <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract" />.
            </summary>
            <param name="edit">Describes the set of changes to apply.</param>
            <param name="cancellationToken">Cancels the in-progress request.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextEditorSynchronizationServiceContract.SubscribeToDocumentChangesAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.IObserver{Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentSynchronizationContract},System.Threading.CancellationToken)">
            <summary>
            Subscribes <paramref name="observer" /> to edits from the specified explicitly-versioned document.
            </summary>
            <param name="textDocument">The explicitly versioned document to subscribe to updates from.</param>
            <param name="observer">The object that will be notified when the document changes.</param>
            <param name="cancellationToken">Cancels the subscription request.</param>
            <remarks>
            <para>
            Document changes are sent as a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditContract" /> with several optional parameters
            and are guaranteed to be sent in order. Observers should be prepared to handle any combination of
            present/missing parameters and should support state changes that come in one message or a batch
            of several.
            </para>
            <para>
            Documents open in a text view in the IDE will be automatically unsubscribed when closed and then
            <see cref="M:System.IObserver`1.OnCompleted" /> will be called.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewChangedListenerContract">
            <summary>
            RPC contract for a listener that is notified when text views are changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewChangedListenerContract.TextViewChangedAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewChange,System.Threading.CancellationToken)">
            <summary>
            Called when an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> with matching document type is changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewMarginProviderContract">
            <summary>
            RPC contract for a text view margin provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewMarginProviderContract.CreateVisualElementAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.Threading.CancellationToken)">
            <summary>
            Called when an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> with matching document is opened.
            </summary>
            <remarks>
            Special scenarios:
            - Document type changes from an unmatching document type to a matching, such as when the user changes the file extension,
              are considered 'text view creations' for the purposes of this API.
            - This API will be called for all already open text views when an extension is hot loaded in the middle of an
              existing session.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewOpenClosedListenerContract">
            <summary>
            RPC contract for a listener that is notified when text views are
            opened and closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewOpenClosedListenerContract.TextViewOpenedAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.Threading.CancellationToken)">
            <summary>
            Called when an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> with matching document type is opened.
            </summary>
            <remarks>
            Special scenarios:
            - Document type changes from an unmatching document type to a matching, such as when the user changes the file extension,
              are considered 'text view creations' for the purposes of this API.
            - This API will be called for all already open text views when an extension is hot loaded in the middle of an
              existing session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewOpenClosedListenerContract.TextViewClosedAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.Threading.CancellationToken)">
            <summary>
            Called when an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> with matching document type is closed.
            </summary>
            <remarks>
            Special scenarios:
            - Document type changes from a matching document type to an unmatching, such as when the user changes the file extension,
              are considered 'text view closes' for the purposes of this API.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerClientContract">
            <summary>
            RPC contract for a text view tagger to communicate back with Editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerClientContract.UpdateTagsAsync(System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange{Microsoft.VisualStudio.RpcContracts.Editor.ITagContract}},System.Threading.CancellationToken)">
            <summary>
            Communicates to Editor that new tags are available.
            </summary>
            <param name="documentVersion">The document version <paramref name="updatedRanges" /> and <paramref name="newTags" /> refer to.</param>
            <param name="updatedRanges">The ranges of documents <paramref name="newTags" /> were calculated for.</param>
            <param name="newTags">The tags calculated for <paramref name="updatedRanges" />.</param>
            <param name="cancellationToken">Cancellation token for the async call</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> tracking the completion of the async operation.</returns>
            <remarks>All previous tags that are fully overlapping <paramref name="updatedRanges" /> will be considered outdated.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerClientContract.InvalidateTagsCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Communicates to Editor that the tags cache should be invalidated.
            </summary>
            <param name="cancellationToken">Cancellation token for the async call</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> tracking the completion of the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerContract">
            <summary>
            RPC contract for a text view tagger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerContract.RequestTagsAsync(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the tagger to generate tags for the specified ranges.
            </summary>
            <param name="documentVersion">The version of the document <paramref name="requestedRanges" /> refers to.</param>
            <param name="requestedRanges">The ranges for which tags should be generated. <paramref name="requestedRanges" /> is
            expected to be in a normalized state: it shouldn't have any empty ranges and ranges should be sorted.</param>
            <param name="recalculateAll">Whether all previous tags generated by this tagger should be considered outdated.</param>
            <param name="cancellationToken">Cancellation token for the async call</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> tracking the completion of the async operation.</returns>
            <remarks>The requested tags are expected to be returned by calling
            <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerClientContract.UpdateTagsAsync(System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange{Microsoft.VisualStudio.RpcContracts.Editor.ITagContract}},System.Threading.CancellationToken)" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerContract.InitializeAsync(Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerClientContract,System.Threading.CancellationToken)">
            <summary>
            Initializes the tagger and provides the client to communicate back with Editor.
            </summary>
            <param name="client">The client object used to communicate back with Editor.</param>
            <param name="cancellationToken">Cancellation token for the async call</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> tracking the completion of the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerProviderContract">
            <summary>
            RPC contract for a text view tagger provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ITextViewTaggerProviderContract.CreateTaggerAsync(Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract,System.String,System.Threading.CancellationToken)">
            <summary>
            Called when an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> with matching document is opened.
            </summary>
            <remarks>
            Special scenarios:
            - Document type changes from an unmatching document type to a matching, such as when the user changes the file extension,
              are considered 'text view creations' for the purposes of this API.
            - This API will be called for all already open text views when an extension is hot loaded in the middle of an
              existing session.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.IVisualCodeLensContract">
            <summary>
            RPC contract representing a visual CodeLens instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.IVisualCodeLensContract.GetVisualizationAsync(Microsoft.VisualStudio.RpcContracts.Editor.CodeElementContextContract,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.RemoteUI.IRemoteUserControl" /> for the CodeLens instance.
            </summary>
            <param name="codeElementContextContract">A context information for the code element
            (range in the document as well as additional properties passed in by CodeLens tagger).</param>
            <param name="clientContext">The state of VS process at the point of request for visualization.</param>
            <param name="token">Cancellation token to observe.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange">
            <summary>
            RPC contract for a text range expressed as offset from the beginning of the document and length.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange" /> is one of four closely related concepts:
            </para>
            <para><list type="bullet"><item>
              <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />: Thick object representing a range of text in a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
              This type should be used in all code within the same process.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> that can
              be sent between processes over RPC. This type should be used in most RPC contracts between processes.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> that can be sent between processes over RPC.
              As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />, it omits the <see cref="T:System.Uri" /> and document version, making
              for a smaller serializable representation. This type should be used in RPC contracts that contain lots of range equivalents
              that need to reduce their payload size for performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" />
              and version for the range to be rehydrated into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService" />.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />, similar to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />.
              As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />, the document position is saved as two integers (<see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Start" /> and
              <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Length" />) instead of four (<see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartLine" />, <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartColumn" />,
              <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndLine" /> and <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndColumn" />). This type omits the <see cref="T:System.Uri" /> and document version
              also and should be used in RPC contracts that contain lots of range equivalents that need to reduce their payload size for
              performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" /> and version for the range to be rehydrated
              into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.ToTextRange(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)" />.
            </item></list></para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange" /> with the specified start point, and length.
            </summary>
            <param name="start">The starting point of the range.</param>
            <param name="length">The length of the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is negative.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Start">
            <summary>
            Gets the starting index of the range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Length">
            <summary>
            Gets the length of the range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.End">
            <summary>
            Gets the ending index of the range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.op_Implicit(Microsoft.VisualStudio.Extensibility.Editor.TextRange)~Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange">
            <summary>
            Allows implicit conversion from a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Equals(Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.ToTextRange(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)">
            <summary>
            Allows conversion to a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />.
            </summary>
            <param name="textDocumentSnapshot">The text document version on which to base the range.</param>
            <returns>The range converted to a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textDocumentSnapshot" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Translate(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Translates this <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange" /> to an older or newer <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="currentDocumentVersion">The document version from which to translate.</param>
            <param name="targetDocumentVersion">The document version to which to translate.</param>
            <param name="textRangeTrackingMode">The <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode" /> to use in the translation.</param>
            <returns>A new range.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentDocumentVersion" /> or <paramref name="targetDocumentVersion" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetDocumentVersion" /> does not refer to the same underlying text document as <paramref name="currentDocumentVersion" />.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.CompareTo(Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.ReloadContract">
            <summary>
            RPC contract for requesting a document be reloaded from disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.ReloadContract.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.ReloadContract" />.
            </summary>
            <param name="textDocument">The document to reload.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.ReloadContract.TextDocument">
            <summary>
            The document to reload.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract">
            <summary>
            An RPC contract for requesting an open document be saved, copied, or moved on disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.Uri,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract" />.
            </summary>
            <param name="before">The <see cref="T:System.Uri" /> of the document to save.</param>
            <param name="after">The new <see cref="T:System.Uri" /> of the document. If <c>null</c>, assumes a 'save' operation.</param>
            <param name="isCopy">
            If <paramref name="before" /> is not the same as <paramref name="after" /> and <paramref name="isCopy" /> is true,
            the file is saved as a copy and the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />'s <see cref="T:System.Uri" /> is not changed.
            </param>
            <param name="allowOverwrite">Allows overwriting the target file.</param>
            <param name="allowCreateFolder">Allows creating the target file's directory, if it doesn't yet exist.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.Before">
            <summary>
            The explicitly versioned document to save.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.After">
            <summary>
            The new document <see cref="T:System.Uri" />. If the same as <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.Before" />,
            operation will be considered a 'Save' rather than a rename or copy.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.IsCopy">
            <summary>
            Indicates that <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.After" /> is a copy of the document and the
            document <see cref="T:System.Uri" /> should not be changed to point at the new
            doc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.AllowOverwrite">
            <summary>
            Enables overwriting existing files, if <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.IsCopy" /> is true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SaveContract.AllowCreateFolder">
            <summary>
            Enables creating the destination folder, if it doesn't yet exist.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.SelectionEditContract">
            <summary>
            Describes a single change to selections of a specific <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.SelectionEditContract.TextView" />
            version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SelectionEditContract.TextView">
            <summary>
            The explicitly versioned document the change should be applied to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.SelectionEditContract.Selections">
            <summary>
            New selections to be applied.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1">
            <summary>
            RPC contract for a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange" /> with an associated tag.
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1" /> with the specified tracking range and tag.
            </summary>
            <param name="range">The range.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1" /> with the specified range, tracking mode and tag.
            </summary>
            <param name="range">The range.</param>
            <param name="trackingMode">The tracking mode.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1" /> with the specified start point, length, tracking mode and tag.
            </summary>
            <param name="start">The starting point of the range.</param>
            <param name="length">The length of the range.</param>
            <param name="trackingMode">The tracking mode.</param>
            <param name="tag">The tag.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is negative.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Range">
            <summary>
            Gets the tracking range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.TrackingMode">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.TrackingMode" />
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Start">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Start" />
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Length">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Length" />
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.End">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.End" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Equals(Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange{`0})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1.Translate(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)">
            <summary>
            Translates this <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TaggedTrackingRange`1" /> to an older or newer <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="currentDocumentVersion">The document version from which to translate.</param>
            <param name="targetDocumentVersion">The document version to which to translate.</param>
            <returns>A new tagged tracking range.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentDocumentVersion" /> or <paramref name="targetDocumentVersion" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetDocumentVersion" /> does not refer to the same underlying text document as <paramref name="currentDocumentVersion" />.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract">
            <summary>
            RPC contract representing an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> in a particular version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract.Uri">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract.Uri" /> of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract.Version">
            <summary>
            The version of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditContract">
            <summary>
            RPC contract describing one or more edits atomically applied to
            an <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditContract.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,Microsoft.VisualStudio.RpcContracts.Editor.TextEditContract[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditContract" />.
            </summary>
            <param name="document"></param>
            <param name="edits"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditContract.Document">
            <summary>
            The explicitly versioned document the change should be applied to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditContract.Edits">
            <summary>
            The individual text changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditResponseContract">
            <summary>
            RPC contract representing <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditResponseContract" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditResponseContract.Before">
            <summary>
            The explicitly versioned <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> before the edit was made.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditResponseContract.After">
            <summary>
            The explicitly versioned <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> after the edit was made.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentEditResponseContract.EditResult">
            <summary>
            The result of the operation. <see cref="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.Success" /> or a failure code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract">
            <summary>
            Immutable object holding metadata for a specific <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />
            version sent from the document owner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract.Uri">
            <summary>
            The document uri.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract.Version">
            <summary>
            The version number of the document, in the host process's versioning
            scheme. The host process is usually Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract.IsDirty">
            <summary>
            Indicates that the document has unsaved changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract.Merge(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract)">
            <summary>
            Merges two instances of <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentMetadataContract" />, giving
            preference to <paramref name="other" />'s values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentSynchronizationContract">
            <summary>
            RPC contract used for synchronizing text document state between Visual Studio and
            extension host's mirror of the text document in OOP extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentSynchronizationContract.Edits">
            <summary>
            The individual text changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentSynchronizationContract.Metadata">
            <summary>
            Any metadata changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextEditContract">
            <summary>
            Describes a single change to a specific <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract" />
            version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextEditContract.Range">
            <summary>
            The section of text to delete and replace with <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.TextEditContract.Text" />.
            Can be zero-length if no text should be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextEditContract.Text">
            <summary>
            The new text to insert in the document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract" />.
            </summary>
            <param name="adornmentType">The identifier of adornment type to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="adornmentType" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract.AdornmentType">
            <summary>
            Gets the identifier of the adornment type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract.Equals(Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract.Equals(Microsoft.VisualStudio.RpcContracts.Editor.ITagContract)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TextMarkerTagContract.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextViewChange">
            <summary>
            RPC contract representing a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextViewChangedArgs" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewChange.BeforeTextView">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewChange.AfterTextView">
            <summary>
            The state of the <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> after the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewChange.DocumentEdits">
            <summary>
            The set of edits made to the document during this change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract">
            <summary>
            RPC contract representing a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> in a particular state and version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract.Id">
            <summary>
            Unique id of the text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewContract.Document">
            <summary>
            The underlying <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TextViewEditResponseContract">
            <summary>
            RPC contract representing TextViewEditResponse.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewEditResponseContract.Before">
            <summary>
            The explicitly versioned <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> before the edit was made.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewEditResponseContract.After">
            <summary>
            The explicitly versioned <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextViewSnapshot" /> after the edit was made.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TextViewEditResponseContract.EditResult">
            <summary>
            The result of the operation. <see cref="F:Microsoft.VisualStudio.RpcContracts.Editor.EditResult.Success" /> or a failure code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange">
            <summary>
            RPC contract for a <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" /> with an associated <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange" /> with the specified range and tracking mode.
            </summary>
            <param name="range">The range.</param>
            <param name="trackingMode">The tracking mode.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Extensibility.Editor.TextRangeTrackingMode)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange" /> with the specified start point, length and tracking mode.
            </summary>
            <param name="start">The starting point of the range.</param>
            <param name="length">The length of the range.</param>
            <param name="trackingMode">The tracking mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> is negative.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.Range">
            <summary>
            Gets the range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.TrackingMode">
            <summary>
            Gets the tracking mode of the range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.Start">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Start" />
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.Length">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Length" />
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.End">
            <inheritdoc cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.End" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.op_Implicit(Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange)~Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange">
            <summary>
            Allows implicit conversion from a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.Equals(Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.ToTrackingTextRange(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)">
            <summary>
            Allows conversion to a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" />.
            </summary>
            <param name="textDocumentSnapshot">The text document version on which to base the range.</param>
            <returns>The range converted to a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TrackingTextRange" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textDocumentSnapshot" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange.Translate(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot,Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)">
            <summary>
            Translates this <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.TrackingRange" /> to an older or newer <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" /> version.
            </summary>
            <param name="currentDocumentVersion">The document version from which to translate.</param>
            <param name="targetDocumentVersion">The document version to which to translate.</param>
            <returns>A new tracking range.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentDocumentVersion" /> or <paramref name="targetDocumentVersion" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetDocumentVersion" /> does not refer to the same underlying text document as <paramref name="currentDocumentVersion" />.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.EditorContextContract">
            <summary>
            RPC contract representing a snapshot of editor context at some point of time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.EditorContextContract.ActiveTextViewId">
            <summary>
            Index of the active text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.EditorContextContract.TextViews">
            <summary>
            State of open text views.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.EditorContextContract.TextDocuments">
            <summary>
            State of open text documents.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract">
            <summary>
            A struct describing a position in a document version.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> is one of three closely related concepts:
            - <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" />: Thick object representing a range of text in a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
              This type should be used in all code within the same process.
            - <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> that can
              be sent between processes over RPC. This type should be used in most RPC contracts between processes.
            - <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" />: A serialiable representation of <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> that can be sent between
              processes over RPC. As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" />, it omits the <see cref="T:System.Uri" />
              and document version, making for a smaller serializable representation. This type should be used in RPC
              contracts that contain lots of position equivalents that need to reduce their payload size for
              performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" /> and version for the
              range to be rehydrated into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> struct.
            </summary>
            <param name="line">The line (0-based) of the position.</param>
            <param name="column">The column (0-based) of the position.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract.Line">
            <summary>
            Gets the line (0-based) of the position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract.Column">
            <summary>
            Gets the column (0-based) of the position.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract">
            <summary>
            A struct describing a explicitly versioned position in a document.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextPosition" /> is one of three closely related concepts:
            - Position: Thick object representing a range of text in an ITextDocument.
              This type should be used in all code within the same process.
            - <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> that can
              be sent between processes over RPC. This type should be used in most RPC contracts between processes.
            - <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" />: A serialiable representation of <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" /> that can be sent between
              processes over RPC. As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" />, it omits the <see cref="T:System.Uri" />
              and document version, making for a smaller serializable representation. This type should be used in RPC
              contracts that contain lots of position equivalents that need to reduce their payload size for
              performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" /> and version for the
              range to be rehydrated into TextRange by IEditorHostService.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" /> struct.
            </summary>
            <param name="textDocument">The text document this position appears on.</param>
            <param name="line">The line (0-based) of the position.</param>
            <param name="column">The column (0-based) of the position.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract.Document">
            <summary>
            Gets a reference to the information describing the underlying document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract.Line">
            <summary>
            Gets the line (0-based) of the position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract.Column">
            <summary>
            Gets the column (0-based) of the position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract.op_Implicit(Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract)~Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract">
            <summary>
            Implicitly converts the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentPositionContract" /> to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.TextPositionContract" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract">
            <summary>
            A struct describing a explicitly versioned range of text in a document.
            </summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" /> is one of four closely related concepts:
            </para>
            <para><list type="bullet"><item>
              <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />: Thick object representing a range of text in a <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot" />.
              This type should be used in all code within the same process.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> that can
              be sent between processes over RPC. This type should be used in most RPC contracts between processes.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> that can be sent between processes over RPC.
              As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" />, it omits the <see cref="T:System.Uri" /> and document version, making
              for a smaller serializable representation. This type should be used in RPC contracts that contain lots of range equivalents
              that need to reduce their payload size for performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" />
              and version for the range to be rehydrated into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.IEditorHostService" />.
            </item>
            <item>
              <see cref="T:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange" />: A serializable representation of <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" />, similar to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />.
              As opposed to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />, the document position is saved as two integers (<see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Start" /> and
              <see cref="P:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.Length" />) instead of four (<see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartLine" />, <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartColumn" />,
              <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndLine" /> and <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndColumn" />). This type omits the <see cref="T:System.Uri" /> and document version
              also and should be used in RPC contracts that contain lots of range equivalents that need to reduce their payload size for
              performance. These RPC contracts will need to pass the document <see cref="T:System.Uri" /> and version for the range to be rehydrated
              into <see cref="T:Microsoft.VisualStudio.Extensibility.Editor.TextRange" /> by <see cref="M:Microsoft.VisualStudio.RpcContracts.Editor.OffsetRange.ToTextRange(Microsoft.VisualStudio.Extensibility.Editor.ITextDocumentSnapshot)" />.
            </item></list></para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.#ctor(Microsoft.VisualStudio.RpcContracts.Editor.TextDocumentContract,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" /> struct.
            </summary>
            <param name="textDocument">The </param>
            <param name="startLine">The line (0-based) of the start of the span.</param>
            <param name="startColumn">The offset (0-based) offset from the start of <paramref name="startLine" /> for the start of the span.</param>
            <param name="endLine">The line (0-based) of the end of the span.</param>
            <param name="endColumn">The offset (0-based) offset from the start of <paramref name="endLine" /> for the end of the span.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.Document">
            <summary>
            Gets a reference to the information describing the underlying document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.StartLine">
            <summary>
            Gets the line (0-based) of the start of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.StartColumn">
            <summary>
            Gets the offset (0-based) offset from the start of <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.StartLine" /> for the start of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.EndLine">
            <summary>
            Gets the line (0-based) of the end of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.EndColumn">
            <summary>
            Gets the offset (0-based) offset from the start of <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.EndLine" /> for the end of the span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract.op_Implicit(Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract)~Microsoft.VisualStudio.RpcContracts.Utilities.Range">
            <summary>
            Implicitly converts the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.VersionedTextDocumentRangeContract" /> to <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.KnownClientContextCategories">
            <summary>
            Known names for common context categories to be used with internal client context service. Use nameof(value) when querying for these categories
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.KnownClientContextCategories.Editor">
            <summary>
            Editor category that includes information such as document version, selections etc.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.KnownEditorClientContextCategoryProperties">
            <summary>
            Known properties for Editor context category to be used with internal client context service. Use nameof(value) when querying for these properties
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Used by C# 9 for property <see langword="init" /> accessors.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.PerformanceSensitiveAttribute">
            <summary>
            Indicates that a code element is performance sensitive under a known scenario.
            </summary>
            <remarks>
            <para>When applying this attribute, only explicitly set the values for properties specifically indicated by the
            test/measurement technique described in the associated <see cref="P:Roslyn.Utilities.PerformanceSensitiveAttribute.Uri" />.</para>
            </remarks>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.Uri">
            <summary>
            Gets the location where the original problem is documented, likely with steps to reproduce the issue and/or
            validate performance related to a change in the method.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.Constraint">
            <summary>
            Gets or sets a description of the constraint imposed by the original performance issue.
            </summary>
            <remarks>
            <para>Constraints are normally specified by other specific properties that allow automated validation of the
            constraint. This property supports documenting constraints which cannot be described in terms of other
            constraint properties.</para>
            </remarks>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowCaptures">
            <summary>
            Gets or sets a value indicating whether captures are allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowImplicitBoxing">
            <summary>
            Gets or sets a value indicating whether implicit boxing of value types is allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowGenericEnumeration">
            <summary>
            Gets or sets a value indicating whether enumeration of a generic
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> is allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.AllowLocks">
            <summary>
            Gets or sets a value indicating whether locks are allowed.
            </summary>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.OftenCompletesSynchronously">
            <summary>
            Gets or sets a value indicating whether the asynchronous state machine typically completes synchronously.
            </summary>
            <remarks>
            <para>When <see langword="true" />, validation of this performance constraint typically involves analyzing
            the method to ensure synchronous completion of the state machine does not require the allocation of a
            <see cref="T:System.Threading.Tasks.Task" />, either through caching the result or by using
            <see cref="T:System.Threading.Tasks.ValueTask`1" />.</para>
            </remarks>
        </member>
        <member name="P:Roslyn.Utilities.PerformanceSensitiveAttribute.IsParallelEntry">
            <summary>
            Gets or sets a value indicating whether this is an entry point to a parallel algorithm.
            </summary>
            <remarks>
            <para>Parallelization APIs and algorithms, e.g. <c>Parallel.ForEach</c>, may be efficient for parallel entry
            points (few direct calls but large amounts of iterative work), but are problematic when called inside the
            iterations themselves. Performance-sensitive code should avoid the use of heavy parallelization APIs except
            for known entry points to the parallel portion of code.</para>
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>wNYYwZhBb/YhHJqAeVV2ESuiI2neuEQaCha+1M1d6UQ=</DigestValue></Reference></SignedInfo><SignatureValue>Os/QKu9RNCPUp1DAMXyJL9Dfvt5fV1iy33aDH5Yp87FaM++fn4hUGFB+4ixBpdPyZkBMCoGYA08bmAMd/mX7A6OTkes7Wh24TaU2K1FgSQyT71Tj37UJIaNvI9lZPW9DztHzERFe7juvM61uOa3RKQKA5/OIdraC5we5crJ7DVTztWslZ28MHEytmNwiXWIPHcpeh7SgC2GKzJxnFc+0on87TysKDJqrGuRxz05VWzpnDw9HdZK/CTrI4Wfa93tbxF2LGzlnnd8wSYI19UlOk28NPtVxf5NUuo3BQMXhPzNzPxxUfdWLI8ws9WI+zhfwTDV/Pyhy1UbEU4OgQy2wjQ==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJjjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/TWO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO/WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9coT2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O0cEIvKdX8uG8oQa047+evMfDRr94MG9EWw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
